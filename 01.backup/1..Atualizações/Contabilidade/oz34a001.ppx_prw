#line 1 "c:/totvs/microsiga-teste/protheus/include\PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\Dialog.ch"
#line 28 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\Font.ch"
#line 29 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\PTMenu.ch"
#line 31 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\Print.ch"
#line 33 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\Colors.ch"
#line 35 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\Folder.ch"
#line 37 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\msobject.ch"
#line 38 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\VKey.ch"
#line 42 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\WinApi.ch"
#line 44 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\FWCommand.ch"
#line 47 "PROTHEUS.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\FWCSS.CH"
#line 50 "PROTHEUS.CH"
#line 2 "c:\totvs\projetos_prod\1..atualizações\contabilidade\\c:/totvs/projetos_prod/1..atualizações/contabilidade/oz34a001.prw"
#line 1 "c:/totvs/microsiga-teste/protheus/include\RWMAKE.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\stdwin.ch"
#line 14 "RWMAKE.CH"
#line 3 "c:\totvs\projetos_prod\1..atualizações\contabilidade\\c:/totvs/projetos_prod/1..atualizações/contabilidade/oz34a001.prw"
#line 1 "c:/totvs/microsiga-teste/protheus/include\FWMVCDEF.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\PARMTYPE.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\PARMTYPECH.CH"
#line 3 "PARMTYPE.CH"
#line 2 "FWMVCDEF.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\FWMBROWSE.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\FWBROWSE.CH"
#line 3 "FWMBROWSE.CH"
#line 4 "FWMVCDEF.CH"
#line 5 "c:\totvs\projetos_prod\1..atualizações\contabilidade\\c:/totvs/projetos_prod/1..atualizações/contabilidade/oz34a001.prw"
#line 1 "c:/totvs/microsiga-teste/protheus/include\TBICONN.CH"
#line 1 "c:/totvs/microsiga-teste/protheus/include\Ap5Mail.ch"
#line 10 "TBICONN.CH"
#line 6 "c:\totvs\projetos_prod\1..atualizações\contabilidade\\c:/totvs/projetos_prod/1..atualizações/contabilidade/oz34a001.prw"
#line 1 "c:/totvs/microsiga-teste/protheus/include\TOPCONN.CH"
#line 7 "c:\totvs\projetos_prod\1..atualizações\contabilidade\\c:/totvs/projetos_prod/1..atualizações/contabilidade/oz34a001.prw"
#line 1 "c:/totvs/microsiga-teste/protheus/include\FILEIO.CH"
#line 11 "c:\totvs\projetos_prod\1..atualizações\contabilidade\\c:/totvs/projetos_prod/1..atualizações/contabilidade/oz34a001.prw"




















    Function U_OZ34A001()


	Local oBrowse 		:= Nil
	Private OemtoAnsi("Cabeçalho do Lançamento Contábil")		:= OemtoAnsi("Importação de Lançamentos Contábeis")
    Private cPerg       := "OZ34A001"
    Private cAliasZR7   := GetNextAlias()
	Private cAliasCT2   := GetNextAlias()
    Private lMsErroAuto := .F. 
    Private lMsHelpAuto	:= .T. 

	DbSelectArea("ZR7")
	DbSelectArea("ZR8")

	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias("ZR7")
	oBrowse:AddLegend("ZR7_STATUS == 'A' "	, "GREEN" , "Aberto" )
	oBrowse:AddLegend("ZR7_STATUS == 'R' "	, "RED"   , "Reprovado" )
	oBrowse:AddLegend("ZR7_STATUS == 'F' "	, "BLACK" , "Finalizado" )
	oBrowse:SetDescription(OemtoAnsi("Cabeçalho do Lançamento Contábil"))
	oBrowse:SetMenuDef("OZ34A001")

	oBrowse:Activate()
Return oBrowse











	Static Function ModelDef()


	Local oModel		:= Nil
	Local oStrZR7		:= Nil
	Local oStrZR8		:= Nil
	Local aCampos		:= {}
    Local nX            := 0
	Local cCamposZR7	:= ""
	Local cCamposZR8	:= ""
	Private cPerg       := "OZ34A001"

	aCampos := ZR7->(DbStruct())

	For nX := 2 To Len(aCampos)
		cCamposZR7 += aCampos[nX][1]
		cCamposZR7 += Iif((nX) < Len(aCampos),";","")
	Next

	aCampos	:= Nil
	aCampos := ZR8->(DbStruct())

	For nX := 2 To Len(aCampos)
		cCamposZR8 += aCampos[nX][1]
		cCamposZR8 += Iif((nX) < Len(aCampos),";","")
	Next


	oModel := MPFormModel():New("OZ34A1M",,,)


	oStrZR7 := FWFormStruct(1,"ZR7",{|cCampo| ( Alltrim(cCampo) $ cCamposZR7 )})
	oStrZR8 := FWFormStruct(1,"ZR8",{|cCampo| ( Alltrim(cCampo) $ cCamposZR8 )})


	oModel:AddFields("M_ZR7",,oStrZR7)

	oModel:AddGrid("M_ZR8","M_ZR7",oStrZR8)





	oModel:SetRelation("M_ZR8", {{"ZR8_FILIAL","FWXFilial('ZR8')"}, {"ZR8_DOCZR7","ZR7_DOC"}, {"ZR8_LTZR7","ZR7_LOTE"}, {"ZR8_SBLZR7","ZR7_SBLOTE"}}, ZR8->(IndexKey(1)))


	oModel:SetPrimaryKey({"ZR7_FILIAL","ZR7_DOC","ZR7_LOTE","ZR7_SBLOTE"})


	oStrZR7:SetProperty("ZR7_STATUS" , 11 , {|| AllTrim("A")})
	oStrZR8:SetProperty("ZR8_DOCZR7" , 11 , {|| oModel:GetModel("M_ZR7"):GetValue("ZR7_DOC")})
	oStrZR8:SetProperty("ZR8_LTZR7"  , 11 , {|| oModel:GetModel("M_ZR7"):GetValue("ZR7_LOTE")})
	oStrZR8:SetProperty("ZR8_SBLZR7" , 11 , {|| oModel:GetModel("M_ZR7"):GetValue("ZR7_SBLOTE")})
    oStrZR8:SetProperty("ZR8_MOEDLC" , 11 , {|| Alltrim(MV_PAR03)})

	oStrZR8:SetProperty("ZR8_DOCZR7" , 8 , {|| .F. })
    oStrZR8:SetProperty("ZR8_LTZR7"  , 8 , {|| .F. })
    oStrZR8:SetProperty("ZR8_SBLZR7" , 8 , {|| .F. })


	oModel:getModel("M_ZR8"):SetUniqueLine({"ZR8_ITEM"})


	oModel:getModel("M_ZR7"):SetDescription(OemToAnsi(OemtoAnsi("Cabeçalho do Lançamento Contábil")))
	oModel:getModel("M_ZR8"):SetDescription(OemtoAnsi(OemtoAnsi("Itens do Lançamento Contábil")))

Return oModel











	Static Function ViewDef()


	Local oView			:= Nil
	Local oModel		:= FWLoadModel("OZ34A001")
	Local oStrZR7		:= Nil
	Local oStrZR8		:= Nil
	Local cCamposZR7	:= ""
	Local cCamposZR8	:= ""
	Local aCampos		:= Nil
	Local nX			:= 0

	aCampos := ZR7->(DbStruct())

	For nX := 2 To Len(aCampos)
		cCamposZR7 += aCampos[nX][1]
		cCamposZR7 += Iif((nX) < Len(aCampos),";","")
	Next

	aCampos	:= Nil
	aCampos := ZR8->(DbStruct())

	For nX := 2 To Len(aCampos)
		cCamposZR8 += aCampos[nX][1]
		cCamposZR8 += Iif((nX) < Len(aCampos),";","")
	Next


	oStrZR7 := FWFormStruct(2,"ZR7",{|cCampo| ( Alltrim(cCampo) $ cCamposZR7 )})
	oStrZR8 := FWFormStruct(2,"ZR8",{|cCampo| ( Alltrim(cCampo) $ cCamposZR8 )})


	oView := FWFormView():New()


	oView:SetModel(oModel)


	oView:AddField("V_ZR7",oStrZR7,"M_ZR7",,)


	oView:AddGrid("V_ZR8",oStrZR8,"M_ZR8",,)


	oView:CreateHorizontalBox("V_SUP",15)
	oView:CreateHorizontalBox("V_INF",85)


	oView:SetOwnerView("V_ZR7","V_SUP")
	oView:SetOwnerView("V_ZR8","V_INF")


	oView:EnableTitleView("V_ZR7",OemtoAnsi(OemtoAnsi("Cabeçalho do Lançamento Contábil")))
	oView:EnableTitleView("V_ZR8",OemtoAnsi(OemtoAnsi("Itens do Lançamento Contábil")))


	oView:AddIncrementField("V_ZR8","ZR8_ITEM")

Return oView











	Static Function MenuDef()


	Local aRotina	:= {}
	Local cCodGru	:= PswRet()[1][1]

    If cCodGru == "000000"
	    Aadd( aRotina, { "Incluir", "VIEWDEF.OZ34A001", 0, 3, 0,,, })
    EndIf

	Aadd( aRotina, { "Visualizar", "VIEWDEF.OZ34A001", 0, 2, 0,,, })
	Aadd( aRotina, { "Alterar", "VIEWDEF.OZ34A001", 0, 4, 0,,, })

	If cCodGru == "000000"
		Aadd( aRotina, { "Excluir", "VIEWDEF.OZ34A001", 0, 5, 0,,, })
	EndIf

	Aadd( aRotina, { "Imprimir", "VIEWDEF.OZ34A001", 0, 8, 0,,, })
	Aadd( aRotina, { "Copiar", "VIEWDEF.OZ34A001", 0, 9, 0,,, })

	Aadd( aRotina, { "Contabilizar", "StaticCall(OZ34A001,Contabilizar)", 0, 9, 0,,, })
    Aadd( aRotina, { "Estornar", "StaticCall(OZ34A001,Estornar)", 0, 9, 0,,, })
	Aadd( aRotina, { "Reprovar", "StaticCall(OZ34A001,Reprovar)", 0, 9, 0,,, })

Return aRotina










	Static Function Reprovar()


    Reclock("ZR7", .F. )
		ZR7->ZR7_STATUS := "R"
	ZR7->(MsUnlock())
Return










	Static Function Estornar()


	Local lDados := .F. 

    If Alltrim(ZR7->ZR7_STATUS) <> "F"
        Iif(FindFunction("APMsgInfo"), APMsgInfo("O Status Atual do Lote Selecionado não permite que ele seja Estornado.", "Atenção"), MsgInfo("O Status Atual do Lote Selecionado não permite que ele seja Estornado.", "Atenção"))
        Return
    EndIf

    FWMsgRun(,{|oSay| lDados := BuscaCT2()},"Estorno","Estornando Lote - "+Alltrim(ZR7->ZR7_LOTE))

    If lDados
        While ! (cAliasCT2)->(Eof())
			CT2->(DbGoto((cAliasCT2)->R_E_C_N_O_))
			RecLock("CT2", .F. )
				CT2->(DbDelete())
			CT2->(MsUnlock())
            (cAliasCT2)->(DbSkip())
        End
        (cAliasCT2)->(DbCloseArea())
		RecLock("ZR7", .f. )
			ZR7->ZR7_STATUS = "A"
		ZR7->(MsUnlock())
		FWMsgRun(,{|| CTBA190( .T. ,ZR7->ZR7_EMISSA,Date(),cFilAnt,cFilAnt,"1", .F. ) },"Processando","Recalculando Saldo .. " )
		Iif(FindFunction("APMsgInfo"), APMsgInfo("Lote Estornado com Sucesso.", "Atenção"), MsgInfo("Lote Estornado com Sucesso.", "Atenção"))
	Else
		Iif(FindFunction("APMsgAlert"), APMsgAlert("Dados não Encontrados.", "Atenção"), MsgAlert("Dados não Encontrados.", "Atenção"))
	EndIf
Return










	Static Function Contabilizar()


    Local lDados    := .F. 
    Local aCabec    := {}
    Local aItens    := {}
    Local nLin      := 1
	Local cChave	:= ""

    If Alltrim(ZR7->ZR7_STATUS) == "F"
        Iif(FindFunction("APMsgInfo"), APMsgInfo("O Status Atual do Lote Selecionado não permite que ele seja contabilizado.", "Atenção"), MsgInfo("O Status Atual do Lote Selecionado não permite que ele seja contabilizado.", "Atenção"))
        Return
    EndIf

    FWMsgRun(,{|oSay| lDados := BuscaLote()},"Contabilização","Contabilizando Lote - "+Alltrim(ZR7->ZR7_LOTE))

    If lDados
        While ! (cAliasZR7)->(Eof())
			ZR7->(DbGoto((cAliasZR7)->R_E_C_N_O_))
			cChave := Alltrim((cAliasZR7)->ZR8_HIST)+"-"+SubStr(Dtos(Stod((cAliasZR7)->ZR7_EMISSA)),5,2)+"/"+SubStr(Dtos(Stod((cAliasZR7)->ZR7_EMISSA)),1,4)+" - "+Alltrim((cAliasZR7)->ZR7_DOC)+Alltrim((cAliasZR7)->ZR7_LOTE)+Alltrim((cAliasZR7)->ZR7_SBLOTE)
            If nLin == 1






                aCabec := {{ "DDATALANC"   , Stod((cAliasZR7)->ZR7_EMISSA)    				, Nil }, { "CLOTE"       , Alltrim((cAliasZR7)->ZR7_LOTE)   				, Nil }, { "CSUBLOTE"    , Alltrim((cAliasZR7)->ZR7_SBLOTE) 				, Nil }, { "CDOC"        , Alltrim((cAliasZR7)->ZR7_DOC)    				, Nil }, { "CPADRAO"     , ""                               				, Nil }, { "NTOTINF"     , 0                                				, Nil }, { "NTOTINFLOT"  , 0                                				, Nil } }
            EndIf
















                aadd(aItens,{{ "CT2_FILIAL" , Alltrim((cAliasZR7)->ZR8_FILIAL)				, NIL }, { "CT2_LINHA"  , Alltrim((cAliasZR7)->ZR8_ITEM)    			, NIL }, { "CT2_MOEDLC" , Alltrim((cAliasZR7)->ZR8_MOEDLC)  			, NIL }, { "CT2_DC"     , Alltrim((cAliasZR7)->ZR8_TPLC)    			, NIL }, { "CT2_CREDIT" , Alltrim((cAliasZR7)->ZR8_CREDIT)  			, NIL }, { "CT2_DEBITO" , Alltrim((cAliasZR7)->ZR8_DEBITO)  			, NIL }, { "CT2_VALOR"  , (cAliasZR7)->ZR8_VALOR            			, NIL }, { "CT2_CCC"    , Alltrim((cAliasZR7)->ZR8_CCC)     			, NIL }, { "CT2_CCD"    , Alltrim((cAliasZR7)->ZR8_CCD)     			, NIL }, { "CT2_ITEMC"  , Alltrim((cAliasZR7)->ZR8_ITEMC)   			, NIL }, { "CT2_ITEMD"  , Alltrim((cAliasZR7)->ZR8_ITEMD)   			, NIL }, { "CT2_CLVLCR" , IIF(Alltrim((cAliasZR7)->ZR8_TPLC)=="1","CPFOLHA"," "), NIL }, { "CT2_CLVLDB" , IIF(Alltrim((cAliasZR7)->ZR8_TPLC)=="2","CPFOLHA"," "), NIL }, { "CT2_ORIGEM" , "OZ34A001"                        			, NIL }, { "CT2_HP"     , ""                                			, NIL }, { "CT2_HIST"   , cChave + " - INT SENIOR" 						, NIL }})

            nLin += 1
            (cAliasZR7)->(DbSkip())
        End
        (cAliasZR7)->(DbCloseArea())

		MSExecAuto( {|X,Y,Z| CTBA102(X,Y,Z)},aCabec,aItens,3)

        If lMsErroAuto
            MostraErro()
			RecLock("ZR7", .F. )
				ZR7->ZR7_STATUS := "R"
			ZR7->(MsUnlock())
		Else
			RecLock("ZR7", .F. )
				ZR7->ZR7_STATUS := "F"
			ZR7->(MsUnlock())
			Iif(FindFunction("APMsgInfo"), APMsgInfo("Lote Contabilizado com Sucesso.", "Atenção"), MsgInfo("Lote Contabilizado com Sucesso.", "Atenção"))
        Endif
    Else
        Iif(FindFunction("APMsgAlert"), APMsgAlert("Dados não Encontrados.", "Atenção"), MsgAlert("Dados não Encontrados.", "Atenção"))
    EndIf
Return











	Static Function BuscaLote()


    Local cQuery  	:= ""
	Local QbLinha 	:= chr(13)+chr(10)
    Local nQtdReg 	:= 0

    cQuery += " SELECT ZR7.*, ZR8.* "+QbLinha

    cQuery += " FROM "
    cQuery +=   RetSqlName("ZR7") + " ZR7 "+QbLinha

    cQuery += " INNER JOIN "
    cQuery +=   RetSqlName("ZR8") + " ZR8 "+QbLinha
    cQuery += " ON ZR8_FILIAL = ZR7_FILIAL "+QbLinha
    cQuery += " AND ZR8_DOCZR7 = ZR7_DOC "+QbLinha
    cQuery += " AND ZR8_LTZR7 = ZR7_LOTE "+QbLinha
    cQuery += " AND ZR8_SBLZR7 = ZR7_SBLOTE "+QbLinha
    cQuery += " AND ZR8.D_E_L_E_T_ = ' ' "+QbLinha

    cQuery += " WHERE ZR7.D_E_L_E_T_ = ' ' "+QbLinha
    cQuery += " AND ZR7_FILIAL = '"+FWXFilial("ZR7")+"' "+QbLinha
    cQuery += " AND ZR7_DOC = '"+Alltrim(ZR7->ZR7_DOC)+"' "+QbLinha
    cQuery += " AND ZR7_LOTE = '"+Alltrim(ZR7->ZR7_LOTE)+"' "+QbLinha
    cQuery += " AND ZR7_SBLOTE = '"+Alltrim(ZR7->ZR7_SBLOTE)+"' "+QbLinha
    cQuery += " AND ZR7_STATUS IN ('A','R') "+QbLinha

    MemoWrite("C:/ricardo/BuscaLote.sql",cQuery)
	cQuery := ChangeQuery(cQuery)
	DbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAliasZR7, .F. , .T. )

	DbSelectArea(cAliasZR7)
	(cAliasZR7)->(DbGoTop())
	nQtdReg := 0; DBEval( {|| nQtdReg := nQtdReg + 1},,,,,.F. )
	(cAliasZR7)->(DbGoTop())

	If nQtdReg <= 0
		(cAliasZR7)->(DbCloseArea())
        Return .F. 
    EndIf
Return .T. 











	Static Function BuscaCT2()


    Local cQuery  	:= ""
	Local QbLinha 	:= chr(13)+chr(10)
    Local nQtdReg 	:= 0

 	cQuery += " SELECT CT2.* "+QbLinha
    cQuery += " FROM "
    cQuery +=   RetSqlName("CT2") + " CT2 "+QbLinha
 	cQuery += " WHERE "+QbLinha
 	cQuery += " CT2.D_E_L_E_T_ = ' ' "+QbLinha
 	cQuery += " AND CT2_LOTE = '"+Alltrim(ZR7->ZR7_LOTE)+"' "+QbLinha
 	cQuery += " AND CT2_SBLOTE = '"+Alltrim(ZR7->ZR7_SBLOTE)+"' "+QbLinha
 	cQuery += " AND CT2_DOC = '"+Alltrim(ZR7->ZR7_DOC)+"' "+QbLinha

    MemoWrite("C:/ricardo/BuscaCT2.sql",cQuery)
	cQuery := ChangeQuery(cQuery)
	DbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAliasCT2, .F. , .T. )

	DbSelectArea(cAliasCT2)
	(cAliasCT2)->(DbGoTop())
	nQtdReg := 0; DBEval( {|| nQtdReg := nQtdReg + 1},,,,,.F. )
	(cAliasCT2)->(DbGoTop())

	If nQtdReg <= 0
		(cAliasCT2)->(DbCloseArea())
        Return .F. 
    EndIf
Return .T. 
