#include "totvs.ch"
#include "Protheus.Ch"
#include "TbiConn.Ch"
#include "totvs.ch"
#include "ozminerals.ch"

#define STATUS_NAO_ENVIADO      	"0"
#define STATUS_PROCESSANDO  		"1"
#define STATUS_FINALIZADO      		"2"
#define STATUS_PENDENCIA            "3"

#define RASTRO      				"L"
#define ENDERECO   			        "S"
#define LOCALIZACAO			        "N"
#define ORIGEM_PRODUTO				"0"
#define CONTROLE_WMS				"2"
#define IMPOSTO_CSLL  				"2"
#define CUSTO_MOEDA 				"1"
#define TIPO_CQ    				    "M"

#define TIPO_PR0   					"PR0/PR1"

#define TIPO_PA						"PA"
#define TIPO_PI						"PI"

#define INCLUI_EST  				 3

#define REGISTRO_ATUALIZADO         "Registro Atualizado"
#define REGISTRO_NAO_ATUALIZADO     "Registro Não Atualizado"

#define MOEDA_01    				"01"
#define MOEDA_02    				"02"
#define MOEDA_03   					"03"
#define MOEDA_04    				"04"
#define MOEDA_05    				"05"

#define GRAVA_FLAG  				"1"

#define OP_MANUTENCAO				"OS"

#define STATUS_RECORD    		     1
#define STATUS_NO_RECORD 		     2

namespace estoque.Producao.Custeio

/*/{Protheus.doc} GravaInformacaoContabil

	Rotina que é chamada pelo Ponto de entrada SD3250I 
    para gravar as informações contabeis na tabela SD3 - Movimento de Estoque - OZminerals 

	Executado na função A250Atu(), rotina responsável pela atualização das tabelas 
	de apontamentos de produção simples.

	tdn : https://tdn.totvs.com/pages/releaseview.action?pageId=6087850

@type function
@author Fabio Santos - CRM Service
@since 01/10/2023
@version P12
@database SQL SERVER 

@Obs

	Executa após atualizar SD3, SB2, SB3 e SC2.

    Tratamento das Queries: 

		GetQryMovimentoEstoque : Retorna movimentação do Estoque tabela SD3 - Ordem de Produção
		GetQryCodigoOpercao    : Retorna o codigo da Operação Contabil para validar na tabela SF5

@see SD3250I
@see OZGENSQL
@see OZGEN18

@nested-tags:Frameworks/OZminerals
/*/ 
User Function GravaInformacaoContabil(cNumeroSequencia)
	Local aArea                   := {}  as array
	Local cCodOperacao            := ""  as character
	Local cAlias	              := ""  as character
	Local cQuery	              := ""  as character

	Private cSintaxeRotina        := ""  as character
	Private cDtUltFechamento      := ""  as character

	cDataFechamento               := GetNewPar("MV_ULMES","20230930")
	cSintaxeRotina                := ProcName(0)

	aArea  		                  := Lj7GetArea({"CT2", "CTT", "CTH", "CTD", "SB8", "SBF", "SB9",;
												 "SB2", "SB1", "SBJ", "SBK", "SD3", "SD4", "SDQ",;
												 "SD5", "SD2", "SD1", "SDB", "SDA", "SDC", "NNR",;
												 "SBE","SBZ"})
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery                  := GetQryMovimentoEstoque(cNumeroSequencia)
	cAlias                  := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				dbSelectArea("SB1")
				SB1->(dbSetOrder(1))
				If ( SB1->(dbSeek(xFilial("SB1") + (cAlias)->D3_COD )) )

					dbSelectArea("SBZ")
					SBZ->(dbSetOrder(1))
					If ( SBZ->(dbSeek(xFilial("SBZ") + (cAlias)->D3_COD )) )

						cCodOperacao := GetCodigoOperacao((cAlias)->D3_NUMSEQ)

						dbSelectArea("SD3")
						SD3->(dbSetOrder(3)) 
						If ( SD3->(dbSeek((cAlias)->D3_FILIAL + (cAlias)->D3_COD + ;
								(cAlias)->D3_LOCAL + (cAlias)->D3_NUMSEQ + (cAlias)->D3_CF )) )

							Begin Transaction

								SD3->(RecLock("SD3",.F.))
									SD3->D3_CONTA    := Alltrim(SB1->B1_CONTA)
									SD3->D3_CC       := Alltrim(SB1->B1_CC)
									SD3->D3_ITEMCTA  := Alltrim(SB1->B1_ITEMCC)
									SD3->D3_XCCCUST  := Alltrim(SB1->B1_CCCUSTO)
									SD3->D3_CLVL     := Alltrim(SB1->B1_CLVL)
									SD3->D3_XOPER    := Alltrim(cCodOperacao)
								SD3->(MsUnlock())

							End Transaction
						EndIf
					Else

						ShowLogInConsole("Informações não Localizadas na tabela SDZ")
					EndIf
				EndIf

				(cAlias)->(dbSkip())
			EndDo

			(cAlias)->(dbCloseArea())
		EndIf
	Else
		ShowLogInConsole("Informações não Localizadas na base de dadaos")
	EndIf

	Lj7RestArea(aArea)

Return

/*
    Retorna o valor do custo apurado na contabilidade
*/
Static Function GetCodigoOperacao(cPesqSequencia)
	Local aArea           := {}  as array
	Local cCodigoOperacao := ""  as character
	Local cAlias          := ""  as character
	Local cQuery          := ""  as character

	aArea  		          := Lj7GetArea({"CT2", "CTT", "CTH", "CTD", "SB8", "SBF", "SB9",;
										 "SB2", "SB1", "SBJ", "SBK", "SD3", "SD4", "SDQ",;
										 "SD5", "SD2", "SD1", "SDB", "SDA", "SDC", "NNR",;
										 "SBE","SBZ"})
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery		          := GetQryCodigoOpercao(cPesqSequencia)
	cAlias                := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		DbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While (cAlias)->(!EOF())

				If ( Alltrim( (cAlias)->D3_CF) $ Alltrim(TIPO_PR0 + "/" + TIPO_PR1))

					dbSelectArea("SF5")
					SF5->(dbSetOrder(1))
					If ( SF5->(dbSeek(xFilial("SF5") + (cAlias)->D3_TM )) )

						cCodigoOperacao  := AllTrim(SF5->F5_XOPER)

					EndIf
				EndIf

				(cAlias)->(dbSkip())
			Enddo

			(cAlias)->(DbCloseArea())
		EndIf
	EndIf

	Lj7RestArea(aArea)

Return cCodigoOperacao

/*
    Retorna o codigo da movimentação da ordem de produção  
*/
Static Function GetQryMovimentoEstoque(cPesqSequencia)
	Local cQuery       := "" as character

	cQuery := "SELECT " + CRLF
	cQuery += "      D3_FILIAL  AS D3_FILIAL,  " + CRLF
	cQuery += "      D3_COD     AS D3_COD,     " + CRLF
	cQuery += "      D3_CF      AS D3_CF,      " + CRLF
	cQuery += "      D3_OP      AS D3_OP,      " + CRLF
	cQuery += "      D3_LOCAL   AS D3_LOCAL,   " + CRLF
	cQuery += "      D3_UM      AS D3_UM,      " + CRLF
	cQuery += "      D3_NUMSEQ  AS D3_NUMSEQ,  " + CRLF
	cQuery += "      D3_TM      AS D3_TM,      " + CRLF
	cQuery += "      D3_XOPER   AS D3_XOPER,   " + CRLF
	cQuery += "      D3_QUANT   AS D3_QUANT,   " + CRLF
	cQuery += "      B1_DESC    AS B1_DESC,    " + CRLF
	cQuery += "      B1_TIPO    AS B1_TIPO     " + CRLF
	cQuery += "FROM  " + RetSqlTab("SD3") + " (NOLOCK)  " + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SBZ") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND D3_FILIAL = BZ_FILIAL " + CRLF
	cQuery += " 				  AND D3_COD    = BZ_COD    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SBZ")    + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SB1") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND B1_COD  = D3_COD  "+ CRLF
	cQuery += "     			  AND " + RetSqlDel("SB1") + CRLF
	cQuery += "WHERE 1=1  " + CRLF
	cQuery += "      AND "+RetSqlFil("SD3")+" " + CRLF
	cQuery += "      AND D3_ESTORNO =  ' ' " + CRLF
	cQuery += "      AND D3_NUMSEQ  =  " + ValToSql(cPesqSequencia)   + " " + CRLF
	cQuery += "      AND D3_OP <> ' ' " + CRLF
	cQuery += "      AND SUBSTRING(D3_OP,7,2) <> " + ValToSql(OP_MANUTENCAO) + " " + CRLF
	cQuery += "      AND " + RetSqlDel("SD3") + CRLF

	u_ChangeQuery("\sql\GravaInformacaoContabil_GetQryMovimentoEstoque.sql",@cQuery)

Return cQuery

/*
    retorna o codigo da movimentação da ordem de produção  
*/
Static Function GetQryCodigoOpercao(cPesqSequencia)
	Local cQuery       := "" as character
	Local cTipoCodigo  := "" as character

	cTipoCodigo        := Alltrim(TIPO_PR0 + "/" + TIPO_PR1)

	cQuery := "SELECT " + CRLF
	cQuery += "      D3_FILIAL  AS D3_FILIAL,  " + CRLF
	cQuery += "      D3_COD     AS D3_COD,     " + CRLF
	cQuery += "      D3_CF      AS D3_CF,      " + CRLF
	cQuery += "      D3_OP      AS D3_OP,      " + CRLF
	cQuery += "      D3_LOCAL   AS D3_LOCAL,   " + CRLF
	cQuery += "      D3_NUMSEQ  AS D3_NUMSEQ,  " + CRLF
	cQuery += "      D3_TM      AS D3_TM,      " + CRLF
	cQuery += "      D3_XOPER   AS D3_XOPER    " + CRLF
	cQuery += "FROM  " + RetSqlTab("SD3") + " (NOLOCK)  " + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SBZ") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND D3_FILIAL = BZ_FILIAL " + CRLF
	cQuery += " 				  AND D3_COD    = BZ_COD    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SBZ")    + CRLF
	cQuery += "WHERE 1=1  " + CRLF
	cQuery += "      AND "+RetSqlFil("SD3")+" " + CRLF
	cQuery += "      AND D3_ESTORNO =  ' ' " + CRLF
	cQuery += "      AND D3_NUMSEQ  =  " + ValToSql(cPesqSequencia)   + " " + CRLF
	cQuery += "		 AND D3_CF      IN " + FormatIn(cTipoCodigo, "/") + " " + CRLF
	cQuery += "      AND D3_OP <> ' ' " + CRLF
	cQuery += "      AND SUBSTRING(D3_OP,7,2) <> " + ValToSql(OP_MANUTENCAO) + " " + CRLF
	cQuery += "      AND " + RetSqlDel("SD3") + CRLF

	u_ChangeQuery("\sql\GravaInformacaoContabil_GetQryCodigoOpercao.sql",@cQuery)

Return cQuery


/*
	Apresenta a Mensagem no Console do Protheus
*/
Static Function showLogInConsole(cMsg)

	libOzminerals.u_showLogInConsole(cMsg,cSintaxeRotina)

Return

