#include "totvs.ch"
#include "Protheus.Ch"
#include "TbiConn.Ch"
#include "totvs.ch"
#include "ozminerals.ch"

#define  PRODUCAO         "1"
#define  TRANSFERENCIA    "2"
#define  BAIXA_REQUISICAO "3"
#define  VENDA_CPV        "4"

#define  PROCESSANDO      "1" // 1=Aguardando Geração da Movimentação
#define  GER_PROCESSADO   "2" // 2=Movimentação Gerado Com Sucesso

#define  AGUARDANDO       "1" // 1=Aguardando a geração
#define  GERADO_SUCESSO   "2" // 2=Gerado com Sucesso
#define  NAO_APLICAVEL    "3" // 3=Não Aplicavel 

#define  MOV_GERADO       "1" // 1=Aguardando Geração
#define  MOV_CRIAROP      "2" // 2=OP Criada
#define  MOV_APONTAROP    "3" // 3=OP Apontada
#define  MOV_TRANSFERIR   "4" // 4=Transferencia 
#define  MOV_BAIXAREQ     "5" // 5=Baixa Requisicao
#define  MOV_PEDVENDA     "6" // 6=Pedido Venda
#define  MOV_DOCGERADO    "7" // 7=Doc. Gerado

#define  MANUTENCAO_OS    "OS"

namespace estoque.Producao.Custeio

/*/{Protheus.doc} CriaOrdemProducao

	Rotina que é chamada de forma Automatica  
	Tratamento do Custo em partes dentro do Sistema

@type function
@author Fabio Santos - CRM Service
@since 08/12/2023
@version P12
@database SQL SERVER 

@see OZGENSQL
@see OZGEN18

@nested-tags:Frameworks/OZminerals
/*/ 
User Function CriaOrdemProducao(cDocumento,cStatus,cAvanco)
	Local  aSays           := {}  as array
	Local  aButtons        := {}  as array
	Local  nOpca           := 0   as numeric
	Local  cTitoDlg        := ""  as character
	Local  cLog            := ""  as character

	Private	cPermiteFilial  := ""  as character
	Private	cLiberaEmpresa  := ""  as character
	Private cSintaxeRotina  := ""  as character

	cPermiteFilial          := AllTrim(GetNewPar("OZ_LIBFIL" ,"01"))
	cLiberaEmpresa          := AllTrim(GetNewPar("OZ_LIBEMP" ,"99"))
	cSintaxeRotina          := ProcName(0)

	If ( cStatus $ AGUARDANDO .And. cAvanco $ MOV_GERADO )

		aAdd(aSays, "Esta rotina tem por objetivo Criar Ordem Produção !!!")
		aAdd(aSays, "Será Gerado Conforme Documento " + cDocumento + " !")

		aAdd(aButtons,{STATUS_RECORD   , .T., {|o| nOpca := STATUS_RECORD   , FechaBatch()}})
		aAdd(aButtons,{STATUS_NO_RECORD, .T., {|o| nOpca := STATUS_NO_RECORD, FechaBatch()}})

		FormBatch(cTitoDlg, aSays, aButtons)

		If ( nOpca == STATUS_RECORD )
		
			FWMsgRun(,{|| OrdemProducao(cDocumento) } ,"Criando Ordem de produção...","Aguarde")
	
		EndIf
	ElseIf ( cAvanco $ NAO_APLICAVEL )
		cLog := "Este processo não será aplicado, pois não Foi criado nos Itens (GRID) !"
		Aviso("Atenção !!!" ,cLog,{"OK"})
	Else 
		cLog := "A Orden de produção já Foi criada, Somente Excluindo a OP é possivel Recria-la "
		Aviso("Atenção !!!" ,cLog,{"OK"})
	EndIf

Return 

/*
 	Gera ordem de Producção em Antas 
*/
Static Function OrdemProducao(cDocumento)
	Local aArea                 := {}  as array
	Local aCarrega              := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character
	aArea       	            := GetArea()
	
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := getQryOrdemProducao(cDocumento)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				If ( AllTrim((cAlias)->PAY_DOC) $ AllTrim(cDocumento) )

					aAdd( aCarrega,{(cAlias)->PAY_FILIAL,;
									(cAlias)->PAY_DOC,;
									(cAlias)->PAY_ITEM,;
									(cAlias)->PAY_COD,;
									(cAlias)->PAY_DESC,;
									(cAlias)->PAY_TIPO,;
									(cAlias)->PAY_UM,;
									(cAlias)->PAY_TM,;
									(cAlias)->PAY_TES,;
									(cAlias)->PAY_TPMOV,;
									(cAlias)->PAY_FILMOV,;
									(cAlias)->PAY_LOCAL,;
									(cAlias)->PAY_QTD,;
									(cAlias)->PAY_COMP,;
									(cAlias)->PAY_DSCEMP,;
									(cAlias)->PAY_QTDEMP,;
									(cAlias)->PAX_DATA,;
									(cAlias)->PAX_HORA,;
									(cAlias)->PAX_USER,;
									(cAlias)->PAY_STATUS,;
									(cAlias)->PAY_OP,;
									(cAlias)->PAY_AVANCO})
				EndIf 

				(cAlias)->(dbSkip())
			EndDo
		EndIf 

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( Len(aCarrega) > 0 )

		AberturaOrdemProducao(aCarrega)
	Else 
		cLog += " - Filial: " + cFilAnt + " - Não Existe Dados"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return 

/*
	Monta a Query para carregar dados - Busca na PAY
*/
Static Function getQryOrdemProducao(cDocumento)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT " + CRLF
	cQuery += "		   PAY_FILIAL AS PAY_FILIAL, " + CRLF
	cQuery += "		   PAY_DOC    AS PAY_DOC,    " + CRLF
	cQuery += "		   PAY_ITEM   AS PAY_ITEM,   " + CRLF 
	cQuery += "		   PAY_COD    AS PAY_COD,    " + CRLF
	cQuery += "		   PAY_DESC   AS PAY_DESC,   " + CRLF
	cQuery += "		   PAY_TIPO   AS PAY_TIPO,   " + CRLF 
	cQuery += "		   PAY_UM     AS PAY_UM,     " + CRLF
	cQuery += "		   PAY_TM     AS PAY_TM,     " + CRLF
	cQuery += "		   PAY_TES    AS PAY_TES,    " + CRLF
	cQuery += "		   PAY_TPMOV  AS PAY_TPMOV,  " + CRLF
	cQuery += "		   PAY_FILMOV AS PAY_FILMOV, " + CRLF 
	cQuery += "		   PAY_LOCAL  AS PAY_LOCAL,  " + CRLF
	cQuery += "		   PAY_QTD    AS PAY_QTD,    " + CRLF
	cQuery += "		   PAY_COMP   AS PAY_COMP,   " + CRLF
	cQuery += "		   PAY_DSCEMP AS PAY_DSCEMP, " + CRLF
	cQuery += "		   PAY_QTDEMP AS PAY_QTDEMP, " + CRLF
	cQuery += "		   PAY_STATUS AS PAY_STATUS, " + CRLF
	cQuery += "		   PAY_AVANCO AS PAY_AVANCO, " + CRLF
	cQuery += "		   PAY_OP     AS PAY_OP,     " + CRLF
	cQuery += "		   PAX_DATA   AS PAX_DATA,   " + CRLF
	cQuery += "		   PAX_HORA   AS PAX_HORA,   " + CRLF
	cQuery += "		   PAX_USER   AS PAX_USER    " + CRLF 
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("PAY") + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SB1") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND PAY_COD  = B1_COD    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SB1")   + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("PAX") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND PAY_FILIAL  = PAX_FILIAL " + CRLF
	cQuery += " 				  AND PAY_DOC     = PAX_DOC    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("PAX") + CRLF
	cQuery += " WHERE  1 = 1 " + CRLF
	cQuery += "   	   AND PAY_DOC    = " + ValToSql(cDocumento) + "  " + CRLF
	cQuery += "   	   AND PAY_STATUS = " + ValToSql(AGUARDANDO) + "  " + CRLF
	cQuery += "   	   AND PAY_TPMOV  = " + ValToSql(PRODUCAO) + "  " + CRLF
	cQuery += "   	   AND PAY_AVANCO = " + ValToSql(MOV_GERADO)  + "  " + CRLF
	cQuery += "   	   AND " + RetSqlDel("PAY") + CRLF
	cQuery += " ORDER BY PAY_ITEM " + CRLF

	u_ChangeQuery("\sql\CriaOrdemProducao_getQryOrdemProducao.sql", @cQuery)

Return cQuery

/*
	Executa abertura ordem produção via Execauto - Rotina MATA650
*/
Static Function AberturaOrdemProducao(aCarrega)
	Local aArea             := {}  as array
	Local aLogErro          := {}  as array
	Local aCabecalho        := {}  as array
	Local aItens            := {}  as array
	Local aItem    			:= {}  as array
	Local aFinaliza         := {}  as array 
	Local nLinhaErro        := 0   as numeric
	Local nCarrega          := 0   as integer
	Local nOpcao            := 0   as integer
	Local nQuantidade       := 0   as integer
	Local nFinaliza         := 0   as integer
	Local lGravaTabela      := .T. as logical
	Local lPassa            := .F. as logical
	Local lPermite          := .F. as logical
	Local cTextoErro        := ""  as character
	Local cLog              := ""  as character
	Local cAlias	        := ""  as character
	Local cEmpBkp 			:= ""  as character
	Local cFilBkp 			:= ""  as character
	Local cNumEmpBkp        := ""  as character
	Local cNumEmp			:= ""  as character
	Local cNumeroOP  		:= ""  as character
	Local cC2Num    		:= ""  as character
	Local cC2Item    		:= ""  as character
	Local cC2Sequen   		:= ""  as character
	Local cCodigoProduto    := ""  as character
	Local cItemMovimento    := ""  as character
	Local cPegaNum          := ""  as character
	Local cDocMovimento     := ""  as character 
	Local cRetLog           := ""  as character 
	Local cRetStatus        := ""  as character 

	Private lAutoErrNoFile  := .T. as logical
	Private lMsErroAuto     := .F. as logical

	aArea       	        := GetArea()

	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	If ( Len(aCarrega) > 0 )
		
		dbSelectArea("PAX")
		PAX->(dbSetOrder(1)) 

		dbSelectArea("SB1")
		SB1->(dbSetOrder(1))

		dbSelectArea("SB2")
		SB2->(dbSetOrder(1))

		dbSelectArea("SC2")
		SC2->(dbSetOrder(1)) 

		dbSelectArea("SD4")
		SD4->(dbSetOrder(1)) 

		dbSelectArea("PAY")
		PAY->(dbSetOrder(2)) 

		For nCarrega:=1 To Len(aCarrega)

			If ( AllTrim(cFilAnt) $ AllTrim(cPermiteFilial) )
				cEmpBkp    := cEmpAnt
				cFilBkp    := cFilAnt
				cNumEmpBkp := cNumEmp
				cEmpAnt    := AllTrim(cLiberaEmpresa)
				cFilAnt    := AllTrim(aCarrega[nCarrega][11])
				cNumEmp    := cEmpAnt + cFilAnt
				OpenFile(cNumEmp)

				nOpcao              := 3 
				lGravaTabela        := .F.
				lPassa              := .F.
				aCabecalho          := {}
				aItem  			    := {}
				aItens              := {}
				aLogErro            := {}
				nQuantidade         := 0
				cRetLog             := "" 
				
				If ( AllTrim(Posicione("SB1",1,xFilial("SB1")+aCarrega[nCarrega][04],"B1_COD")) == AllTrim(aCarrega[nCarrega][04]) )
					lGravaTabela   := .T.
				Else
					lGravaTabela   := .F.
					cRetLog := "Produto Não Localizado !"

					If ( PAX->(dbSeek(xFilial("PAX") + aCarrega[nCarrega][02] )))
						Begin Transaction
						PAX->(RecLock("PAX",.F.))
							PAX->PAX_RETLOG := cRetLog
						PAX->(MsUnlock())
						End Transaction
					EndIf
				EndIf

				If ( lGravaTabela )

					lMsErroAuto := .F.
					lPermite    := .F.

					If ( SB1->(dbSeek(xFilial("SB1") + aCarrega[nCarrega][04] )) )

						cNumeroOP      := NumOrdemProducao(cFilant)
						cPegaNum       := SubStr(cNumeroOP,1,6)
						cC2Num         := StrZero(Val(cPegaNum)+1,6)  
						cC2Item        := SubStr(cNumeroOP,7,2)
						cC2Sequen      := SubStr(cNumeroOP,9,3)
						cDocMovimento  := aCarrega[nCarrega][02]
						cItemMovimento := aCarrega[nCarrega][03]
						cCodigoProduto := aCarrega[nCarrega][04]
						nQuantidade    := aCarrega[nCarrega][13]

						If ( SC2->(dbSeek(xFilial("SC2") + cPegaNum + cC2Item + cC2Sequen )))
							cRetLog := "Ordem de Produção na Base de Dados!"
						Else 
							If Empty(Alltrim(cNumeroOP))
								cC2Num    := "000001"
								cC2Item   := "01"
								cC2Sequen := "001"
							EndIf 
						EndIf
			
						SC2->(dbSetOrder(1)) 
						If ( SC2->(dbSeek(xFilial("SC2") + cC2Num + cC2Item + cC2Sequen )))
							lGravaTabela := .F.
							cRetLog := "Ordem de Produção Já existe na Base de Dados!"

							If ( PAX->(dbSeek(xFilial("PAX") + cDocMovimento )))
								Begin Transaction
								PAX->(RecLock("PAX",.F.))
									PAX->PAX_RETLOG := cRetLog
								PAX->(MsUnlock())
								End Transaction
							EndIf
						Else 
							lGravaTabela := .T.
						EndIf

						If ( lGravaTabela )

							dbSelectArea("SC2")

							aCabecalho := { {"C2_FILIAL"  ,xFilial("SC2")               ,NIL},;
											{"C2_NUM"     ,cC2Num                       ,NIL},; 
											{"C2_ITEM"    ,cC2Item                      ,NIL},; 
											{"C2_SEQUEN"  ,cC2Sequen                    ,NIL},;
											{"C2_PRODUTO" ,aCarrega[nCarrega][04]       ,NIL},;
											{"C2_LOCAL"   ,aCarrega[nCarrega][12]       ,NIL},;
											{"C2_QUANT"   ,nQuantidade                  ,NIL},;
											{"C2_DATPRI"  ,dDatabase                    ,NIL},;
											{"C2_DATPRF"  ,dDatabase                    ,NIL},;
											{"AUTEXPLODE" ,"S" 					        ,NIL}}

							ProcRegua(0)
							IncProc("Adicionando Ordem Producao do Produto ... " + Alltrim(aCarrega[nCarrega][05]) + "...")

							msExecAuto({|x,Y| Mata650(x,Y)},aCabecalho,nOpcao)

							If ( lMsErroAuto )

								cTextoErro := ""
								aLogErro   := GetAutoGRLog()

								For nLinhaErro := 1 To Len(aLogErro)
									cTextoErro += aLogErro[nLinhaErro] + CRLF
								Next nLinhaErro

								cLog       += cTextoErro + CRLF
								ShowLogInConsole(cLog)
								Aviso("Atenção - ExecAuto( MATA650 ) !!!" ,cLog,{"OK"})
								lPermite := .F.
							Else
								lPermite := .T.
							EndIf

							If ( lPermite )
								cLog       := "Ordem de Producao registrada com sucesso " + CRLF
							Else 
								cLog       := "Ordem de Producao Não registrada" + CRLF
							EndIf

							ShowLogInConsole(cLog)

							If ( PAX->(dbSeek(xFilial("PAX") + cDocMovimento )))
								If ( lPermite )
									cRetStatus := GERADO_SUCESSO
								Else 
									cRetStatus := AGUARDANDO
								EndIf
								Begin Transaction
									PAX->(RecLock("PAX",.F.))
										PAX->PAX_STATUS := PROCESSANDO
										PAX->PAX_CRIAOP := cRetStatus
										PAX->PAX_DATA   := dDataBase 
										PAX->PAX_RETLOG := cRetLog
									PAX->(MsUnlock())
								End Transaction
							EndIf

							aFinaliza := ValidaEncerramento(cDocMovimento,cFilAnt)  	

							If Len(aFinaliza) > 0
								For nFinaliza := 1 To Len(aFinaliza)

									lPassa := .F.

									If ( lPermite )
										If ( aFinaliza[nFinaliza][03] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL ))
											lPassa := .T.
										Else
											lPassa := .F.
										EndIf
									EndIf

									If ( lPassa )
										If ( aFinaliza[nFinaliza][04] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
											lPassa := .T.
										Else
											lPassa := .F.
										EndIf
									EndIf

									If ( lPassa )
										If ( aFinaliza[nFinaliza][05] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
											lPassa := .T.
										Else
											lPassa := .F.
										EndIf
									EndIf

									If ( lPassa )
										If (aFinaliza[nFinaliza][06] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
											lPassa := .T.
										Else
											lPassa := .F.
										EndIf
									EndIf

									If ( lPassa )
										If (aFinaliza[nFinaliza][07] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
											lPassa := .T.
										Else
											lPassa := .F.
										EndIf
									EndIf

									If ( lPassa )
										If (aFinaliza[nFinaliza][08] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
											lPassa := .T.
										Else
											lPassa := .F.
										EndIf
									EndIf

									If ( lPassa .And. lPermite ) 
										If ( PAX->(dbSeek(xFilial("PAX") + aFinaliza[nFinaliza][02])))
											Begin Transaction
												PAX->(RecLock("PAX",.F.))
													PAX->PAX_STATUS := GERADO_SUCESSO
												PAX->(MsUnlock())
											End Transaction
										EndIf
									EndIf
								Next nFinaliza 
							EndIf 

							If ( lPassa .And. lPermite )
								cRetLog := "Criado Ordem de Produção Numero " + ( cC2Num + cC2Item + cC2Sequen )  
							Else
								cRetLog := "Não Foi Criado Ordem de Produção"
							EndIf
							
							If ( lPermite )
								If ( PAY->(dbSeek(xFilial("PAY") + cCodigoProduto + cDocMovimento + cItemMovimento )))
									Begin Transaction
										PAY->(RecLock("PAY",.F.))
											PAY->PAY_STATUS := GERADO_SUCESSO
											PAY->PAY_AVANCO := MOV_CRIAROP
											PAY->PAY_DATA   := dDataBase 
											PAY->PAY_HORA   := Time()
											PAY->PAY_OP     := ( cC2Num + cC2Item + cC2Sequen)
										PAY->(MsUnlock())
									End Transaction
								EndIf
							EndIf
						EndIf 
					EndIf
				EndIf
			EndIf 
		Next nCarrega

		If ( !Empty(AllTrim(cEmpBkp)))
			cEmpAnt := cEmpBkp
			cFilAnt := cFilBkp
			cNumEmp := cEmpAnt + cFilAnt
			OpenFile(cNumEmp)
		EndIf 

		If ( !Empty(cAlias) )
			dbSelectArea(cAlias)
			(cAlias)->(dbCloseArea())
		EndIf	

	EndIf

	RestArea( aArea )

Return 

/*
 	Gera Ultimo numero da ordem de Produção  
*/
Static Function NumOrdemProducao(cCodFilial)
	Local aArea                 := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character
	Local cNumOrdemProducao     := ""  as character

	aArea       	            := GetArea()
	
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := NumeroOrdemProducao(cCodFilial)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				cNumOrdemProducao := (cAlias)->NUMERO 

				(cAlias)->(dbSkip())
			EndDo
		EndIf 

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return cNumOrdemProducao

/*
	Monta a Query para carregar mnumero maximo da ordem de produção
*/
Static Function NumeroOrdemProducao(cCodFilial)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT MAX(C2_NUM+C2_ITEM+C2_SEQUEN) AS NUMERO " + CRLF
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("SC2") + CRLF
	cQuery += " WHERE  1 = 1 " + CRLF
	cQuery += "   	   AND C2_FILIAL   = " + ValToSql(cCodFilial) + "  " + CRLF
	cQuery += "   	   AND NOT C2_ITEM = " + ValToSql(MANUTENCAO_OS) + "  " + CRLF
	cQuery += "   	   AND " + RetSqlDel("SC2") + CRLF

	u_ChangeQuery("\sql\CriaOrdemProducao_NumeroOrdemProducao.sql", @cQuery)

Return cQuery

/*
 	Gera Validação de Encerramento da movimentação  
*/
Static Function ValidaEncerramento(cDocMovimento,cCodFilial)
	Local aArea                 := {}  as array
	Local aCheckMovimento       := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character

	aArea       	            := GetArea()
	
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := QryCheckValidacao(cDocMovimento,cCodFilial)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				aAdd(aCheckMovimento,{(cAlias)->PAX_FILIAL,;
									  (cAlias)->PAX_DOC,;
									  (cAlias)->PAX_CRIAOP,;
									  (cAlias)->PAX_APTOOP,;
									  (cAlias)->PAX_TRANSF,; 
									  (cAlias)->PAX_REQUIS,; 
									  (cAlias)->PAX_PVENDA,; 
									  (cAlias)->PAX_GERNF}) 
				
				(cAlias)->(dbSkip())
			EndDo
		EndIf 

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return aCheckMovimento

/*
	Monta a Query para Checar os status da PAX
*/
Static Function QryCheckValidacao(cDocMovimento,cCodFilial)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT  " + CRLF
	cQuery += "		   PAX_FILIAL AS PAX_FILIAL, " + CRLF
	cQuery += "		   PAX_DOC    AS PAX_DOC,    " + CRLF
	cQuery += "		   PAX_CRIAOP AS PAX_CRIAOP, " + CRLF
	cQuery += "		   PAX_APTOOP AS PAX_APTOOP, " + CRLF
	cQuery += "		   PAX_TRANSF AS PAX_TRANSF, " + CRLF
	cQuery += "		   PAX_REQUIS AS PAX_REQUIS, " + CRLF
	cQuery += "		   PAX_PVENDA AS PAX_PVENDA, " + CRLF
	cQuery += "		   PAX_GERNF  AS PAX_GERNF   " + CRLF
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("PAX") + CRLF
	cQuery += " WHERE  1 = 1 " + CRLF
	cQuery += "   	   AND PAX_FILIAL = " + ValToSql(cCodFilial) + "  " + CRLF
	cQuery += "   	   AND PAX_DOC    = " + ValToSql(cDocMovimento) + "  " + CRLF
	cQuery += "   	   AND " + RetSqlDel("PAX") + CRLF

	u_ChangeQuery("\sql\CriaOrdemProducao_QryCheckValidacao.sql", @cQuery)

Return cQuery


/*
	Apresenta a Mensagem no Console do Protheus
*/
Static Function showLogInConsole(cMsg)

	libOzminerals.u_showLogInConsole(cMsg,cSintaxeRotina)

Return

