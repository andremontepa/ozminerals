#include "totvs.ch"
#include "Protheus.Ch"
#include "TbiConn.Ch"
#include "totvs.ch"
#include "ozminerals.ch"

#define APONTA_TOTAL     "T"
#define APONTA_PARCIAL   "P"

#define OPCAO_INCLUI      3 
#define OPCAO_ALTERA      4 
#define OPCAO_EXCLUI      5 

namespace estoque.Producao.Custeio

/*/{Protheus.doc} ApontaOrdemProducaoAntas

	Rotina que é chamada pelo Ponto de entrada MTA250MNU, 
	Tratamento do Custo em partes dentro do Sistema

	Localização  : Function MenuDef() - Responsável pelo menu Funcional.

	Em Que Ponto : Ponto de Entrada MA250MNU, utilizado para adicionar itens no 
				   menu  principal do fonte MATA250.
	
	Tdn : Sem Documentação 

@type function
@author Fabio Santos - CRM Service
@since 15/11/2023
@version P12
@database SQL SERVER 

@see MA650MNU
@see OZGENSQL
@see OZGEN18

@nested-tags:Frameworks/OZminerals
/*/ 
User Function ApontaOrdemProducaoAntas(OrdemProducao,cCodigoProduto)
	Local aSays        		      := {}  as array
	Local aButtons     		      := {}  as array
	Local nOpca        		      := 0   as numeric
	Local cTitoDlg     		      := ""  as character

	Private cSintaxeRotina        := ""  as character
	Private	cPermiteFilial        := ""  as character
	Private cBuscaProduto         := ""  as character
	Private cFilialAntas          := ""  as character
	Private cFilialPedraBranca    := ""  as character
	Private cLocalEstoque         := ""  as character
	Private cTipoMovimento        := ""  as character

	Private nQuantidadeMinerio    := 0   as integer 

	cFilialAntas                  := AllTrim(GetNewPar("OZ_FILAN"  ,"02"))
	cFilialPedraBranca            := AllTrim(GetNewPar("OZ_FILPB"  ,"06"))
	cBuscaProduto   			  := AllTrim(GetNewPar("OZ_PRODUT" ,"131440"))
	cLocalEstoque                 := AllTrim(GetNewPar("OZ_LOCPRD" ,"10"))
	cTipoMovimento                := AllTrim(GetNewPar("OZ_PRODTM" ,"002"))
	cSintaxeRotina                := ProcName(0)
	cTitoDlg    	              := "Gera Ordem de Produção do Produto 131440 em ANTAS"

	aAdd(aSays, "Esta rotina tem por objetivo apontar ordem de produção em ANTAS,")
	aAdd(aSays, "para facilitar o processo a conferencia na contabilização!")
	aAdd(aSays, "Será apontado a ordem de produção "+OrdemProducao+" do produto "+cCodigoProduto+"!")

	aAdd(aButtons,{STATUS_RECORD   , .T., {|o| nOpca := STATUS_RECORD   , FechaBatch()}})
	aAdd(aButtons,{STATUS_NO_RECORD, .T., {|o| nOpca := STATUS_NO_RECORD, FechaBatch()}})

	FormBatch(cTitoDlg, aSays, aButtons)

	If ( nOpca == STATUS_RECORD )

		If ( Alltrim(cCodigoProduto) $ Alltrim(cBuscaProduto) )
			lFiltrado := PerguntaParametro()
		Else 
			Aviso("Atenção - ExecAuto( MATA250 )!!!" ,"Este Produto "+cCodigoProduto+" é Diferente do "+cBuscaProduto +" !!!",{"OK"})
			Return
		EndIf 

		If lFiltrado 
			If ( AllTrim(OrdemProducao) $ AllTrim(MV_PAR01) )
				FWMsgRun(,{|| ApontaProducaoAntas(OrdemProducao) } ,"Gerando Apontamento Ordem de produção em Antas ...","Aguarde")
			Else 
				Aviso("Atenção - ExecAuto( MATA250 )!!!" ,"Ordem de Produção Diferente da Selecionada!!!",{"OK"})
			EndIf
		Else
			Return
		Endif
	EndIf
Return

/*
 	Gera ordem de Producção em Antas 
*/
Static Function ApontaProducaoAntas(cOrdemProducao)
	Local aArea                 := {}  as array
	Local aCarrega              := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character

    aArea                       := GetArea()

	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := getQryOrdemProducao(cOrdemProducao)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				If ( AllTrim((cAlias)->C2_PRODUTO) $ AllTrim(cBuscaProduto) )

					aAdd( aCarrega,{(cAlias)->C2_FILIAL,;
									(cAlias)->C2_NUM,; 
									(cAlias)->C2_ITEM,;
									(cAlias)->C2_SEQUEN,;
									(cAlias)->C2_PRODUTO,;
									(cAlias)->C2_LOCAL,;
									(cAlias)->C2_QUANT,;
									(cAlias)->C2_DATPRI,;
									(cAlias)->C2_DATPRF,;
									(cAlias)->C2_ITEMGRD})
				EndIf 

				(cAlias)->(dbSkip())
			EndDo
		EndIf 

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( Len(aCarrega) > 0 )

		CriaOrdemProducaoAntas(aCarrega)
	Else 
		cLog += " - Filial: " + cFilAnt + " - Não Existe Dados"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return

/*
	Monta a Query para carregar dados - Busca na SC2
*/
Static Function getQryOrdemProducao(cOrdemProducao)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT " + CRLF
	cQuery += "		   C2_FILIAL  AS C2_FILIAL,   " + CRLF
	cQuery += "		   C2_NUM     AS C2_NUM,      " + CRLF
	cQuery += "		   C2_ITEM    AS C2_ITEM,     " + CRLF
	cQuery += "		   C2_SEQUEN  AS C2_SEQUEN,   " + CRLF
	cQuery += "		   C2_PRODUTO AS C2_PRODUTO,  " + CRLF
	cQuery += "		   C2_LOCAL   AS C2_LOCAL,    " + CRLF
	cQuery += "		   C2_QUANT   AS C2_QUANT,    " + CRLF
	cQuery += "		   C2_DATPRI  AS C2_DATPRI,   " + CRLF
	cQuery += "		   C2_DATPRF  AS C2_DATPRF,   " + CRLF
	cQuery += "		   C2_ITEMGRD AS C2_ITEMGRD   " + CRLF
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("SC2") + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SB1") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND C2_PRODUTO  = B1_COD    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SB1")    + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SBZ") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND C2_FILIAL   = BZ_FILIAL " + CRLF
	cQuery += " 				  AND C2_PRODUTO  = BZ_COD    " + CRLF
	cQuery += " 				  AND C2_LOCAL    = BZ_LOCPAD " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SBZ")    + CRLF
	cQuery += " WHERE " + CRLF
	cQuery += " 				  1 = 1 " + CRLF
	cQuery += "   				  AND C2_FILIAL                =  " + ValToSql(cFilialAntas)  + "  " + CRLF
	cQuery += "   			      AND C2_NUM+C2_ITEM+C2_SEQUEN =  " + ValToSql(cOrdemProducao) + "  " + CRLF
	cQuery += "   			      AND C2_ITEM     <> " + ValToSql(OP_MANUTENCAO)  + "  " + CRLF
	cQuery += "   	              AND " + RetSqlDel("SC2")     + CRLF
	cQuery += " ORDER   " + CRLF
	cQuery += "         BY C2_FILIAL, C2_NUM " + CRLF

	u_ChangeQuery("\sql\ApontaOrdemProducaoAntas_getQryOrdemProducao.sql", @cQuery)

Return cQuery

/*
	Executa abertura ordem produção am ANTAS via Execauto - Rotina MATA650
*/
Static Function CriaOrdemProducaoAntas(aCarrega)
	Local aArea             := {}  as array
	Local aLogErro          := {}  as array
	Local aCabecalho        := {}  as array
	Local aItens            := {}  as array
	Local aItem    			:= {}  as array
	Local nLinhaErro        := 0   as numeric
	Local nCarrega          := 0   as integer
	Local nOpcao            := 0   as integer
	Local lGravaTabela      := .T. as logical
	Local cTextoErro        := ""  as character
	Local cLog              := ""  as character
	Local cStatus           := ""  as character
	Local cAlias	        := ""  as character
	Local cEmpBkp 			:= ""  as character
	Local cFilBkp 			:= ""  as character
	Local cNumEmpBkp        := ""  as character
	Local cNumEmp			:= ""  as character
	Local cNumOP			:= ""  as character

	Private lAutoErrNoFile  := .T. as logical
	Private lMsErroAuto     := .F. as logical

    aArea                       := GetArea()

	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	If ( Len(aCarrega) > 0 )
		
		For nCarrega:=1 To Len(aCarrega)

			If ( AllTrim(cFilAnt) $ AllTrim(cFilialPedraBranca) )
				cEmpBkp    := cEmpAnt
				cFilBkp    := cFilAnt
				cNumEmpBkp := cNumEmp
				cEmpAnt    := "01"
				cFilAnt    := "02"
				cNumEmp    := cEmpAnt + cFilAnt
				OpenFile(cNumEmp)

				nOpcao              := OPCAO_INCLUI 
				lGravaTabela        := .F.
				aCabecalho          := {}
				aItem  			    := {}
				aItens              := {}
				aLogErro            := {}
				nQuantidadeMinerio  := MV_PAR01  

				If ( AllTrim(Posicione("SB1",1,xFilial("SB1")+aCarrega[nCarrega][05],"B1_COD")) == AllTrim(aCarrega[nCarrega][05]) )
					lGravaTabela   := .T.
				Else
					lGravaTabela   := .F.
					cStatus        := "Codigo de Produto Não Localizado"
				EndIf

				If ( lGravaTabela )

					lMsErroAuto := .F.

					dbSelectArea("SB1")
					SB1->(dbSetOrder(1))
					If ( SB1->(dbSeek(xFilial("SB1") + aCarrega[nCarrega][05] )) )

						dbSelectArea("SC2")
						SC2->(dbSetOrder(1)) 
						If ( SC2->(dbSeek(xFilial("SC2") + aCarrega[nCarrega][02] +; 
														   aCarrega[nCarrega][03] +;	
														   aCarrega[nCarrega][04] +;
														   aCarrega[nCarrega][10] )))
							lGravaTabela := .F.
						Else 
							lGravaTabela := .T.
						EndIf

						If ( lGravaTabela )

							dbSelectArea("SD3")

							cOrdemProducao   := aCarrega[nCarrega][02] + ;
										  		aCarrega[nCarrega][03] + ;
										  		aCarrega[nCarrega][04]	

							aCabecalho := { {"D3_FILIAL"  ,xFilial("SC2")         ,NIL},;
											{"D3_OP"      ,cNumOP				  ,NIL},; 
											{"D3_COD"     ,aCarrega[nCarrega][05] ,NIL},;
											{"D3_QUANT"   ,aCarrega[nCarrega][07] ,NIL},;
											{"D3_PARCTOT" ,"T"                    ,NIL},;
											{"D3_TM"      ,cTipoMovimento         ,NIL},;
											{"D3_QTMAIOR" ,0                      ,NIL}}

							ProcRegua(0)
							IncProc("Apontando Ordem de Producao do Produto ... " + Alltrim(aCarrega[nCarrega][05]) + "...")

							msExecAuto({|x,Y| mata250(x,Y)},aCabecalho,nOpcao)

							If ( lMsErroAuto )

								cTextoErro := ""
								aLogErro   := GetAutoGRLog()

								For nLinhaErro := 1 To Len(aLogErro)
									cTextoErro += aLogErro[nLinhaErro] + CRLF
								Next nLinhaErro

								cLog       += cTextoErro + CRLF
								ShowLogInConsole(cLog)
								Aviso("Atenção - ExecAuto( MATA650 ) !!!" ,cLog,{"OK"})
							Else

								cLog       := "Ordem de Producao Apontada com sucesso " + CRLF
								ShowLogInConsole(cLog)
								Aviso("Atenção - ExecAuto( MATA650 ) !!!" ,cLog,{"OK"})
							EndIf
						EndIf 
					EndIf
				EndIf
			EndIf 
		Next nCarrega

		If ( !Empty(cAlias) )
			dbSelectArea(cAlias)
			(cAlias)->(dbCloseArea())
		EndIf	

		If ( !Empty(AllTrim(cEmpBkp)))
			cEmpAnt := cEmpBkp
			cFilAnt := cFilBkp
			cNumEmp := cEmpAnt + cFilAnt
			OpenFile(cNumEmp)
		EndIf 

	EndIf

	RestArea( aArea )

Return

/*
    Carrega perguntas da rotina PARAMBOX
*/
Static Function PerguntaParametro() As Logical
	Local   lRet        := .F. as logical
	Local   aPergunta   := {}  as array
	Local   aRetorno    := {}  as array
	Local   cOrdemProd  := ""  as character

	cOrdemProd     		:= ""
	
	aAdd( aPergunta , { 1, "Ordem Producao:         " , cOrdProdDe  , PesqPict("SD3","D3_OP")     , ".T.", "SC2" , ".T.", 50    , .F. } )

	If ( ParamBox(aPergunta ,"Parametros ",aRetorno, /*4*/, /*5*/, /*6*/, /*7*/, /*8*/, /*9*/, /*10*/, .F.))

		Mv_Par01 := aRetorno[01]

		lRet := .T.
	EndIf

Return lRet

/*
	Apresenta a Mensagem no Console do Protheus
*/
Static Function showLogInConsole(cMsg)

	libOzminerals.u_showLogInConsole(cMsg,cSintaxeRotina)

Return

