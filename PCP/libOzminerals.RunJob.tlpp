#include "totvs.ch"
#include "Protheus.Ch"
#include "TbiConn.Ch"
#include "totvs.ch"
#include "ozminerals.ch"

namespace libOZminerals

#define MAX_ELEMENTS			7
#define XX1MODULO				1
#define XX1DESCR				2

Static __lEnvironmentPrepared	:= .T.
Static __lResetEnvironment		:= .F.

/*/{Protheus.doc} runJOB

	Rotina Genérica para Execução de Rotinas parametrizadas em JOB
	Executa Rotinas via Job ( Schedule Protheus )
	Vantagens: Padronizar os Códigos de Execução de Rotinas em JOB, tratando erros fatais e 
	validando se o ambiente está ativo para ser executado com segurança (Evitar Erros TOP -2 - Sem Conexão com o DBACCESS)

@type function
@author Fabio Santos - CRM Service
@since 08/10/2023
@version P12
@database SQL SERVER 

@nested-tags:Frameworks/OZminerals
/*/
User Function runJOB(aParam)	
	Local lRet 					:= .F.

	Default aParam				:= Nil
	
	Private lSchedule			:= .F.
	Private lJOBDirect			:= .F.	
	Private cJobCode			:= ""
	Private cJobName			:= ""
	Private lLoginUser			:= .T.
	Private cRoutineToExecute	:= ""
	Private cCodEmp 			:= ""
	Private cCodFil 			:= ""
	Private cUser				:= ""
	Private cPass				:= ""
	Private cModulo				:= ""
	Private cCodUser			:= ""
	Private cCodSchedule		:= ""
	Private cCodTask			:= ""
	Private aGetDataIniFile		:= {}
	Private aParamsSchedule		:= {}
	Private lAudit				:= .T.

	//Executado pelo Schedule
	If ( ValType(aParam) == "A" .And. Len(aParam) >= MAX_ELEMENTS )
		lSchedule := .T.
	//Executado por JOB direto
	ElseIf ( ValType(aParam) == "A" .And. Len(aParam) < MAX_ELEMENTS )
		lJOBDirect := .T.
	Endif

	If ( lSchedule )
		showLogInConsole("Executando Rotina por Schedule...")
		lRet := execScheduleJob(aParam)
	ElseIf ( lJOBDirect )
		showLogInConsole("Executando Rotina por JOB Direto...")
		lRet := execServiceJob(aParam)
	Else
		showLogInConsole("JOB não será executado - Rotina Chamadora: " + ProcName(1))
	Endif	
	
Return lRet

/*
	Executa a Rotina pelo Schedule do Protheus
*/
Static Function execScheduleJob(aParam)
	Local lRet := .F.
	
	If ( prepareJob("",aParam) )
		lRet := executeJOB(cUser,cCodTask)
		resetJob()
	Endif
	
Return lRet

/*
	Executa a Rotina em Modo de JOB Direto no Serviço
*/
Static Function execServiceJob(aParam)
	Local nJobs				:= 0
	Local aJobs				:= {}
	Local lRet				:= .F.
	
	Private cInifile 		:= GetAdv97()	
	Private cPrefixoJOB		:= Iif(Len(aParam) > 1,aParam[01],"")
	Private cJob			:= "" //Para Uso Externo
	
	If ( isInJob() )
		
		If ( getJobs(@aJobs) )
			For nJobs:=1 To Len(aJobs)				
				
				cJob 	:= AllTrim(aJobs[nJobs])
				showLogInConsole("Executando: " + cJob + "...")
				
				If ( prepareJob(cJob, aParam) )
					lRet := executeJOB(cUser,cJob)
					resetJob()
				Endif

			Next nJobs
		Else
			If ( Type("lDebugJOB") == "L" .And. lDebugJOB )
				showLogInConsole("Homologando JOB em Ambiente de Debug (VsCode)...")
				cJob := cPrefixoJOB
				If ( prepareJob(cJob, aParam) )
					lRet := executeJOB(cUser,cJob)
					resetJob()
				Endif
			Else
				showLogInConsole("Não encontrado configurações do JOB no Arquivo Ini do AppServer. Vide documentação")
			Endif
		Endif
	Else
		showLogInConsole("Rotina não pode ser executada em ambiente gráfico.")
	Endif	
	
Return lRet

/*
	Recupera os Jobs a serem executados - Para posterior definição da Empresa/Filial
*/
Static Function getJobs(aJobs)
	Local cJobs 		:= AllTrim(GetPvProfString(cPrefixoJOB,"JOBS","",cInifile))
	Local aJobsLoaded 	:= {}
	Local nCont			:= 0
	Local lRet			:= .F.

	cJobs := StrTran(cJobs,Space(01),"")
	If ( !Empty(cJobs) )
		aJobsLoaded := StrTokArr(cJobs,",")
		For nCont:=1 to Len(aJobsLoaded)
			cJob := aJobsLoaded[nCont]
			If ( cPrefixoJOB $ cJob )
				aAdd( aJobs , cJob )
			Endif
		Next nCont
	Endif
	
	If ( Len(aJobs) > 0 )
		lRet := .T.
	Endif
	
Return lRet

/*
	Inicializa o Ambiente do JOB conforme configurações do Arquivo Ini
*/
Static Function prepareJob(cJob,aParam)
	Local cParamsSchedule		:= ""
	Local cGetDataIniFile		:= ""
	Local cDescSchedule 		:= ""
	Local cModSchedule			:= ""
	Local nModSchedule 			:= 0
	Local cError				:= ""
	Local cMsg					:= ""
	Local bError				:= {|| }	
	Local aRet 					:= {}
	Local lRet					:= .F.
	
	Default aParam				:= {}

	If ( lSchedule )
	
		nParams				:= Len(aParam)
		cJobCode			:= AllTrim(Upper(aParam[01]))
		cRoutineToExecute	:= AllTrim(Upper(aParam[02]))
		lLoginUser			:= ( aParam[03] == "S" )
		lGetIniFile			:= .F.
		
		If ( nParams == 8 )
			cParamsSchedule	:= AllTrim(aParam[04]) //Parâmetros Adicionais para Uso Externo
			If !( Empty(cParamsSchedule) )
				cParamsSchedule	:= StrTran(cParamsSchedule,";",",")
				aParamsSchedule := StrTokArr(cParamsSchedule,",")
			Endif
		Endif
		
		cCodEmp		:= aParam[nParams-3]
		cCodFil		:= aParam[nParams-2]		
		cCodUser	:= aParam[nParams-1]		
		cCodTask	:= aParam[nParams] //SCHDTSK
		cCodSchedule:= Left(cCodTask,06) //XX1

		If ( lLoginUser )
			cUser		:= libOzminerals.u_getUserLogin(cCodUser)
			cPass		:= ""
		Endif
		
		If ( defDataSchedule(cCodSchedule,cCodEmp,cCodFil,@aRet) )
			cDescSchedule 	:= aRet[01]
			nModSchedule 	:= aRet[02]
			cModSchedule	:= aRet[03]
		Endif
		
		If ( Empty(cModulo) )
			cModulo := "FAT"
		
			If ( !Empty(cCodSchedule) )
				If ( !Empty(nModSchedule) )
					cModulo := cModSchedule
				Endif
			Endif
		Endif
		
		cJobName := cDescSchedule
		If ( Empty(cJobName) )
			cJobName := cJobCode
		Endif

		lRet := .T.
	
	ElseIf ( lJOBDirect )
	
		cJobCode			:= AllTrim(Upper(aParam[01]))
		cJobName			:= aParam[02]
		cRoutineToExecute	:= AllTrim(Upper(aParam[03]))
		lLoginUser			:= ( aParam[04] == "S" )
		If ( Type("lDebugJOB") == "L" .And. lDebugJOB )
			lGetIniFile		:= .F.
		Else
			If ( Len(aParam) >= 5 )
				lGetIniFile		:= ( aParam[05] == "S" )
			Else
				lGetIniFile		:= .T.
			Endif
		Endif
		
		If ( lGetIniFile )
			cCodEmp 	:= libOzminerals.u_getDataIniFile("Empresa")
			cCodFil 	:= libOzminerals.u_getDataIniFile("Filial")
			cUser		:= libOzminerals.u_getDataIniFile("Usuario")
			If ( Empty(cUser) )
				cUser := "JOB"
			Endif
			cPass		:= libOzminerals.u_getDataIniFile("Senha")
			cModulo		:= libOzminerals.u_getDataIniFile("Modulo")
			cCodUser	:= libOzminerals.u_getDataIniFile("CodUsuario")
			If ( cCodUser == '-1' .Or. Empty(cCodUser) )
				cCodUser := getUserCode(cUser)
			Endif			
		Else

			If ( Len(aParam) >= 6 )
				cGetDataIniFile := Alltrim(aParam[06])
				If ( !Empty(cGetDataIniFile) )
					aGetDataIniFile := Separa(cGetDataIniFile,",")
					If ( Len(aGetDataIniFile) >= 6 )
						cCodEmp := aGetDataIniFile[01]
						cCodFil := aGetDataIniFile[02]
						cUser 	:= aGetDataIniFile[03]
						cPass 	:= aGetDataIniFile[04]
						cModulo := aGetDataIniFile[05]
						cCodUser:= aGetDataIniFile[06]
					Endif
				Else
					showLogInConsole("Atenção! Não informado os dados de Empresa/Filial/Usuário/Senha/Módulo/Cód. Usuário para Debug. Informe em aParam[06] para continuar.")
				Endif
			Else
				showLogInConsole("Atenção! Não informado os dados de Empresa/Filial/Usuário/Senha/Módulo/Cód. Usuário para Debug. Informe em aParam[06] para continuar.")
			Endif
		Endif
		
		If ( validConfigJOB(cCodEmp,cCodFil,cUser,cPass,cModulo,lLoginUser) )
			lRet := .T.
		Endif
	Endif
	
	If ( lRet )
		If ( !Empty(cCodEmp) .And. !Empty(cCodFil) )
			showLogInConsole("Executando a preparação do Ambiente...")
			
			RpcClearEnv()
			RpcSetType(3)
		
			Begin Sequence
			
				bError 	:= ErrorBlock({|oError| getErrorBlock(oError,@cError) } )	
			
				If ( lLoginUser )
					If ( !Empty(cPass) )
						showLogInConsole("Preparando Ambiente com Autenticação de Usuário...")
						PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil USER cUser PASSWORD cPass MODULO cModulo
					Else
						showLogInConsole("Preparando Ambiente com Login do Usuário...")
						PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil USER cUser MODULO cModulo
					Endif
				Else				
					PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil MODULO cModulo
				Endif
			
			End Sequence
			
			ErrorBlock(bError)

			If ( !Empty(cError) )
				If ( !Empty(cMsg) )
					cMsg += CRLF
				Endif
				cMsg += cError
				lRet := .F.
			Endif
			
			showLogInConsole(cMsg)
		Endif
		
		lRet := libOZminerals.u_posValidConfigJOB()
	Endif
	
Return lRet

/*
	Define os dados do Schedule
*/
Static Function defDataSchedule(cCodSchedule,cCodEmp,cCodFil,aRet)
	Local nNumModuloSchedule	:= 0    as numeric
	Local cDescSchedule			:= ""   as character
	Local cModulo				:= ""   as character
	Local lRet 					:= .F.  as logical
	
	Default aRet				:= {}
	
	If ( !Empty(cCodEmp) .And. !Empty(cCodFil) )
	
		libOZminerals.u_prepareEnvironment(cCodEmp,cCodFil)
		
			If ( libOZminerals.u_posValidConfigJOB() )
				showLogInConsole("Recuperando Dados do Schedule - Tabela XX1...")
				aRet				:= getDataSchedule(cCodSchedule)
				
				nNumModuloSchedule 	:= aRet[1]
				cDescSchedule 		:= aRet[2]
				
				cModulo 			:= StrTran(QA_AmbDet(nNumModuloSchedule,,1),"SIGA","")
				
				aRet := {}
				aAdd( aRet, cDescSchedule )
				aAdd( aRet, nNumModuloSchedule )
				aAdd( aRet, cModulo )
			Else
				showLogInConsole("Ambiente não preparado ao recuperar Dados do Schedule na Tabela XX1!")
			Endif
			
		libOZminerals.u_resetEnvironment()
	Endif
	
	If ( Len(aRet) > 0 )
		lRet := .T.
	Endif
	
Return lRet

/*
	Retorna o Número do Módulo conforme o agendamento do schedule
*/
Static Function getDataSchedule(cCodSchedule)
	Local cAliasXX1				:= "XX1"	as character
	Local nNumModuloSchedule	:= 05   	as numeric
	Local cDescSchedule			:= ""   	as character
	Local aRet					:= {}   	as array

	FwOpenXX1()
	(cAliasXX1)->(dbSetOrder(1))
	If ( (cAliasXX1)->(dbSeek(cCodSchedule)) )
		nNumModuloSchedule 	:= (cAliasXX1)->(FieldGet(FieldPos("XX1_MODULO"))) /* XX1->XX1_MODULO */
		cDescSchedule 		:= AllTrim( (cAliasXX1)->(FieldGet(FieldPos("XX1_DESCR"))) /* XX1->XX1_DESCR */)
		
		aAdd( aRet , nNumModuloSchedule )
		aAdd( aRet , cDescSchedule )
	Else
		aAdd( aRet , 05 )
		aAdd( aRet , "Cód. Schedule XX1: " + cCodSchedule )
	Endif

Return aRet

/*
	Valida as Configurações do JOB
*/
Static Function validConfigJOB(cCodEmp,cCodFil,cUser,cPass,cModulo,lLoginUser)
	Local cMsg		:= ""
	Local cError	:= ""
	Local bError	:= {|| }
	Local lRet 		:= .F.
	
	Begin Sequence
	
		lRet	:= .F.
		cError 	:= ""
		bError 	:= ErrorBlock({|oError| getErrorBlock(oError,@cError) } )	
		
		If ( cCodEmp == '-1' .Or. cCodFil == '-1' .Or. Empty(cCodEmp) .Or. Empty(cCodFil) )
			cMsg := "Falha na Preparação do Ambiente do JOB de Integração - Empresa/Filial não Definidos no Arquivo Ini do Serviço de JOB"	
			Break
		Endif
		
		If ( cModulo == '-1' .Or. Empty(cModulo) )
			cMsg := "Falha na Preparação do Ambiente do JOB de Integração - Módulo não Definido no Arquivo Ini do Serviço de JOB"
			Break
		Endif
		
		If ( lLoginUser )
			If ( cUser == '-1' .Or. Empty(cUser) )
				cMsg := "Falha na Preparação do Ambiente do JOB de Integração - Usuário não Definido no Arquivo Ini do Serviço de JOB"	
				Break
			Endif
		
			If ( lJobDirect )
				If ( cPass == '-1' .Or. Empty(cPass) )
					cMsg := "Falha na Preparação do Ambiente do JOB de Integração - Senha do Usuário não Definido no Arquivo Ini do Serviço de JOB"	
					Break
				Endif
			Endif
		
			If !( checkUserInJOB(cCodEmp,cCodFil,cUser,cPass) )
				cMsg := "Falha na Autenticação do Usuário Informado  para execução do JOB"
				Break
			Endif
		Endif
		
		lRet := .T.
		
	End Sequence
	
	ErrorBlock(bError)

	If ( !Empty(cError) )
		If ( !Empty(cMsg) )
			cMsg += CRLF
		Endif
		cMsg += cError
		lRet := .F.
	Endif
	
	If ( !lRet )
		cMsg += CRLF + "JOB não será executado!"
		showLogInConsole(cMsg)
	Endif
	
Return lRet

/*/{Protheus.doc} posValidConfigJOB

Valida se o JOB foi preparado corretamente

@type function
@author Fabio Santos 
@since 08/10/2023
@version P12
@database SQL SERVER 

@param [lForce], logical, Indica se deve forçar a verificação do ambiente. Padrão: .F.

@sample	
	lRet := libOZminerals.u_posValidConfigJOB()

@nested-tags:Frameworks/OZminerals
/*/
User Function posValidConfigJOB(lForce)
	Local cMsg		:= ""
	Local cError	:= ""
	Local bError	:= {|| }
	Local lRet 		:= .F.

	Default lForce 	:= .F.
	
	Begin Sequence
	
		lRet	:= .F.
		cError 	:= ""
		bError 	:= ErrorBlock({|oError| getErrorBlock(oError,@cError) } )	
		
		If !( Select("SX6") > 0 )
			cMsg := "Ambiente não Preparado - SX6 não disponível - Aguardando Próxima Execução do JOB."
			Break
		Endif
		
		If !( Type("cFilAnt") == "C" )
			cMsg := "Ambiente não Preparado - Variável Filial não disponível - Aguardando Próxima Execução do JOB."
			Break
		Endif
		
		If !( TCIsConnected() )
			cMsg := "Ambiente não Preparado - Banco de Dados não conectado - Aguardando Próxima Execução do JOB."
			Break
		Endif
		
		If ( Type("cRoutineToExecute") == "C" .And. Empty(cRoutineToExecute) )
			cMsg := "Rotina a ser executada não informada."
			Break
		Endif
		
		lRet := .T.
		
	End Sequence
	
	ErrorBlock(bError)

	If ( !Empty(cError) )
		If ( !Empty(cMsg) )
			cMsg += CRLF
		Endif
		cMsg += cError
		lRet := .F.
	Endif

	If ( isInJob() .Or. lForce )
		If ( !lRet )
			cMsg := "Ambiente não preparado para executar o JOB: " + CRLF + cMsg
		Else
			cMsg := "Ambiente para executar o JOB: OK"
		Endif

		cMsg += " - Processos: " 
		cMsg += ProcName(1)
		If ( !Empty(ProcName(2)) )
			cMsg += " - "
			cMsg += ProcName(2)
		EndIf

		showLogInConsole(cMsg)
	EndIf

Return lRet

/*
	Finaliza o Ambiente do JOB
*/
Static Function resetJob()
	showLogInConsole("JOB Finalizado!")
	RESET ENVIRONMENT
Return

/*
	Executa uma rotina específica de uma empresa específica
*/
Static Function executeJOB(cUser,cJob)	
	Local cGroup 	   		:= FwGrpCompany()
	Local cCompany  		:= FwCodFil()
	Local cCodUser			:= getUserCode(cUser)
	Local lRet				:= .F.
	
	If ( !Empty(cGroup) .And. !Empty(cCompany) )

		If ( Select("SX6") > 0 )
			lAudit	:= GetNewPar("ZZ_LOGJOB",.T.)
		EndIf

		showLogInConsole(Replicate("-",80))
		If ( lJOBDirect )
			showLogInConsole("INICIANDO JOB - " + cJobName)
		Else
			showLogInConsole("INICIANDO SCHEDULE - " + cJobName)
		Endif
		showLogInConsole("EMPRESA: " + cGroup + "-" + cCompany)
		If ( !Empty(cCodUser) .And. !Empty(cUser) )
			showLogInConsole("COD USUARIO: " + cCodUser + " - " + cUser)
		ElseIf ( !Empty(cUser) )
			showLogInConsole("USUARIO: " + cUser)
		Endif
		showLogInConsole("COD AGENDAMENTO: " + cJob)

		lRet := routineToExecute()
		
		showLogInConsole("FINALIZADO JOB - " + cJobName)
		showLogInConsole(Replicate("-",80))	
	Endif
		
Return lRet

/*
	Rotina a ser executada
*/
Static Function routineToExecute()
	Local cMsg 	 := ""
	Local cError := ""
	Local bError := {|| }
	Local lRet	 := .T.

	Begin Sequence
		
		cError 	:= ""
		bError 	:= ErrorBlock({|oError| getErrorBlock(oError,@cError) } )
		
		showLogInConsole("Executando a Rotina '" + cRoutineToExecute + "'...")
		&(cRoutineToExecute)
		
	End Sequence
	
	ErrorBlock(bError)

	If ( !Empty(cError) )
		If ( !Empty(cMsg) )
			cMsg += CRLF
		Endif
		cMsg += cError
	Endif
	
	If ( !Empty(cMsg) )
		showLogInConsole(cMsg)
	Endif
		
Return lRet

/*
	Função para retornar o Código do Usuário
	Alternativa a Função WFCodUser(), muita lenta no ambiente da MAFRA
*/
Static Function getUserCode(cUserName) 
	Local cCodUser		:= ""

	cCodUser := libOzminerals.u_getUserCode(cUserName)
	
Return cCodUser

/*
	Verifica se a conexão do Login e Senha do Usuário
*/
Static Function checkUserInJOB(cCodEmp,cCodFil,cLogin,cPass)
	Local cMsg	:= ""
	Local lRet	:= .F.
	
	If ( !Empty(cLogin) )
		lRet := libOzminerals.u_checkUserInJOB(cCodEmp,cCodFil,cLogin,cPass,@cMsg)		
		showLogInConsole(cMsg)
	Else
		showLogInConsole("Login de Conexão do Usuário Não Informado")
	Endif
	
Return lRet

/*
	Checa se está sendo executado em JOB
*/
Static Function isInJob()
	Local lRet := .F.
	
	lRet := libOzminerals.u_isInJob()
	
Return lRet

/*
	Retorna a Mensagem de Error Log Fatal Completa
	Mas apresenta as Variáveis de Ambiente Separadamente em cErrorEnv (Passar por Referência - Opcional)
	Usar Função dentro de Bloco de Código encapsulado dentro de um Begin Sequence..End Sequence
	Vide Função ErrorBlock()
*/
Static Function getErrorBlock(oError as object, cError as character, cErrorEnv as character) as character
	
	libOzminerals.u_getErrorBlock(oError,@cError,@cErrorEnv)
	
Return

/*/{Protheus.doc} getDataIniFile

	Rotina Genérica para obter um conteúdo de uma chave de um arquivo Ini 
	tratando o tipo do retorno e buscando variáveis Privates se existirem (cJob,cIniFile)

@type function
@author Fabio Santos 
@since 08/10/2023
@version P12
@database SQL SERVER 

@param cKey, character, Chave do Arquivo Ini a ser considerada
@param [cType], character, Tipo do Conteúdo a ser retornado. Padrão: "C"
@param [cSession], character, Sessão do Arquivo Ini a ser pesquisada. Padrão: Variável Private "cJob" se existir
@param [cFile], character, Nome do Arquivo Ini a ser pesquisado. Padrão: Variável Private "cIniFile" se existir

@return variant, uContent - Conteúdo da Chave pesquisada

@sample
	cFilial 			:= libOzminerals.u_getDataIniFile("Filial")
	nTempoFrequencia 	:= libOzminerals.u_getDataIniFile("TempoFrequencia","N")
	dDataInicial 		:= libOzminerals.u_getDataIniFile("DataInicial","D")
	
@obs
	Pode ser utilizada nas rotinas de JOBs (Rotina a Executar) para obter propriedades especiais
	do arquivo ini da sessão do JOB posicionada, permitindo estender funcionalidades conforme configurações
	direto no Arquivo Ini. 
	
	Atenção! Não aplicável quando a rotina é executada via Schedule.
	
@see libOzminerals.u_runJOB

@nested-tags:libOzminerals/Framework 
/*/
User Function getDataIniFile(cKey as character, cType as character, cSession as character, cFile as character) as variant
	Local uContent		:= ""	as variant
	
	Default cKey		:= ""
	Default cType		:= ""
	Default cSession	:= Iif(Type("cJob")=="C",cJob,"")
	Default cFile		:= Iif(Type("cInifile")=="C",cInifile,"")
	
	If ( !Empty(cSession) .And. !Empty(cKey) )
		uContent := GetPvProfString(cSession,cKey ,"",cFile)
	Endif
	
	Do Case
		Case ( cType == "N" )
			uContent := Val(uContent)
		Case ( cType == "D" )
			uContent := CtoD(uContent)
			If ( ValType(uContent) <> "D" )
				uContent := StoD(uContent)
			Endif
		Case ( cType == "L" )
			uContent := Iif(Upper(AllTrim(AllToChar(uContent))) $ ".T.,T,S,TRUE,VERDADEIRO",.T.,.F.)
	End Case

Return uContent

/*/{Protheus.doc} prepareEnvironment

	Realiza a preparação do Ambiente

@type function
@author Fabio Santos 
@since 08/10/2023
@version P12
@database SQL SERVER 

@param [cCodEmp], character, Código do Grupo de Empresa (cEmpAnt)
@param [cCodFil], character, Código da Filial (cFilAnt)
@param [cCodUser], character, Código do Usuário
@param [cSiglaModulo], character, Sigla do Módulo
@param [lForce], logical, Indica se deve forçar a verificação do ambiente. Padrão: .F.

@return logical, lRet - Indica se o ambiente foi preparado

@obs
	Se não informado empresa e filial vai buscar a primeira empresa/filial do SIGAMAT/SM0 para fazer a preparação do Ambiente

@see checkEnvironment
@see resetEnvironment

@nested-tags:Frameworks/libOzminerals
/*/
User Function prepareEnvironment(cCodEmp,cCodFil,cCodUser,cSiglaModulo,lForce)
	Local cError		:= ""
	Local cMsg			:= ""
	Local bError		:= {|| }
	Local lRet			:= .F.
	
	Default cCodEmp		:= "01"
	Default cCodFil		:= "001001"
	Default cCodUser	:= ""
	Default cSiglaModulo:= "FAT"
	Default lForce		:= .F.

	If !( u_checkEnvironment(lForce) )

		If ( Empty(cCodEmp) .And. Empty(cCodFil) )
			Public cEmpAnt	:= cCodEmp
			Public cFilAnt	:= cCodFil						
		EndIf
		
		If ( !Empty(cCodEmp) .And. !Empty(cCodFil) )
			
			Begin Sequence
			
				lRet 	:= .F.
				cError	:= ""
				bError 	:= ErrorBlock({|oError| getErrorBlock(oError,@cError) } )	
				
				RPCSetType(3)
				
				If ( !Empty(cCodUser) )
					PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil USER cCodUser MODULO cSiglaModulo
				Else
					PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil MODULO cSiglaModulo
				EndIf

				__lResetEnvironment := .T.
				showLogInConsole("Ambiente Preparado! Será encerrado posteriormente...")
				If ( Select("SX6") > 0 ) 
					FWSM0Util():setSM0PositionBycFilAnt()
				EndIf

				lRet := .T.
				
			End Sequence
			
			ErrorBlock(bError)

			If ( !Empty(cError) )
				If ( !Empty(cMsg) )
					cMsg += CRLF
				Endif
				cMsg += cError
				lRet := .F.
			Endif			
		EndIf
	EndIf

Return lRet

/*/{Protheus.doc} resetEnvironment

	Faz o Reset do Ambiente somente se houve a necessidade de preparar o Ambiente anteriormente

@type function
@author Fabio Santos 
@since 08/10/2023
@version P12
@database SQL SERVER 

@see checkEnvironment
@see prepareEnvironment

@nested-tags:Frameworks/libOzminerals
/*/
User Function resetEnvironment()
	Local cLog := ""
	
	If ( __lResetEnvironment )
		cLog := "Limpando Ambiente"
		cLog += " - Rotina Chamadora: " + ProcName(1)
		If ( !Empty(ProcName(2)) )
			cLog += " - " + ProcName(2)
		EndIf
		cLog += "..."
		showLogInConsole(cLog)
		
		RESET ENVIRONMENT
		__lResetEnvironment := .F.
	EndIf

Return

/*/{Protheus.doc} checkEnvironment

	Verifica se o ambiente está preparado para executar funções

@type function
@author Fabio Santos 
@since 08/10/2023
@version P12
@database SQL SERVER 

@param [lForce], logical, Indica se deve forçar a verificação do ambiente. Padrão: .F.

return logical, lRet - Indica se o ambiente está preparados

@see prepareEnvironment
@see resetEnvironment

@nested-tags:Frameworks/libOzminerals
/*/
User Function checkEnvironment(lForce) as logical
	Local lRet 		:= .T. as logical
	
	Default lForce	:= .F.

	If ( libOzminerals.u_isInJob() .Or. lForce )
		If !( libOzminerals.u_posValidConfigJOB(lForce) )
			lRet := .F.
		EndIf
	EndIf
	
	__lEnvironmentPrepared := lRet

Return lRet

/*
	Apresenta a Mensagem no Console do Protheus
*/
Static Function showLogInConsole(cMsg)

	libOzminerals.u_showLogInConsole(cMsg,"libOzminerals.u_runJOB")

Return

