#include "totvs.ch"
#include "Protheus.Ch"
#include "TbiConn.Ch"
#include "totvs.ch"
#include "ozminerals.ch"

#define  PRODUCAO         "1"
#define  TRANSFERENCIA    "2"
#define  BAIXA_REQUISICAO "3"
#define  VENDA_CPV        "4"

#define  PROCESSANDO      "1"

#define  AGUARDANDO       "1"
#define  GERADO_SUCESSO   "2"
#define  NAO_APLICAVEL    "3" 

#define  OZMINERALS       "01"
#define  MANUTENCAO_OS    "OS"

#define OPCAO_INCLUI      3 
#define OPCAO_ALTERA      4 
#define OPCAO_EXCLUI      5 

#define  MOV_GERADO       "1"
#define  MOV_CRIAROP      "2"
#define  MOV_APONTAROP    "3"
#define  MOV_TRANSFERIR   "4"
#define  MOV_BAIXAREQ     "5"
#define  MOV_PEDVENDA     "6"
#define  MOV_DOCGERADO    "7"

#define  TIPO_PEDIDO      "N"
#define  TIPOCLI          "F"

namespace estoque.Producao.Custeio

/*/{Protheus.doc} GeraPedidoVendaPorto

	Rotina que é chamada de forma Automatica MATA410
	Tratamento do Custo em partes dentro do Sistema

@type function
@author Fabio Santos - CRM Service
@since 08/12/2023
@version P12
@database SQL SERVER 

@see OZGENSQL
@see OZGEN18

@nested-tags:Frameworks/OZminerals
/*/ 
User Function GeraPedidoVendaPorto(cDocumento,cStatus,cAvanco)
	Local  aSays            := {}  as array
	Local  aButtons         := {}  as array
	Local  nOpca            := 0   as numeric
	Local  cTitoDlg         := ""  as character
	Local  cLog             := ""  as character

	Private cSintaxeRotina  := ""  as character
	Private	cPermiteFilial  := ""  as character
	Private	cLiberaEmpresa  := ""  as character
	Private	cClienteLoja    := ""  as character
	Private	cLojaCliente    := ""  as character
	Private	cCondPgto       := ""  as character
	Private cTransportadora := ""  as character

	cPermiteFilial          := AllTrim(GetNewPar("OZ_LIBFIL" ,"01/06/02"))
	cLiberaEmpresa          := AllTrim(GetNewPar("OZ_LIBEMP" ,"99"))
	cClientePadrao          := AllTrim(GetNewPar("OZ_CLIENT" ,"000083"))     
	cLojaCliente            := AllTrim(GetNewPar("OZ_CLLOJA" ,"0001"))     
	cCondPgto               := AllTrim(GetNewPar("OZ_CONPGTO","001")) 
	cTransportadora         := AllTrim(GetNewPar("OZ_TRANSPT","000001"))  

	cSintaxeRotina          := ProcName(0)

	If ( cStatus $ AGUARDANDO .And. cAvanco $ MOV_GERADO )

		aAdd(aSays, "Esta rotina tem por objetivo Gerar Pedido de Vendas - CPV !")
		aAdd(aSays, "Será Gerado Conforme Documento " + cDocumento + " !")

		aAdd(aButtons,{STATUS_RECORD   , .T., {|o| nOpca := STATUS_RECORD   , FechaBatch()}})
		aAdd(aButtons,{STATUS_NO_RECORD, .T., {|o| nOpca := STATUS_NO_RECORD, FechaBatch()}})

		FormBatch(cTitoDlg, aSays, aButtons)

		If ( nOpca == STATUS_RECORD )
		
			FWMsgRun(,{|| PedidoVendaPorto(cDocumento) } ,"Gerando Pedido de Venda...","Aguarde")
	
		EndIf
	ElseIf ( cAvanco $ NAO_APLICAVEL )
		cLog := "Este processo não será aplicado, pois não Foi criado nos Itens (GRID) !"
		Aviso("Atenção !!!" ,cLog,{"OK"})
	Else
		cLog := "Pedido de VEndas Já executada, Somente Excluindo é possivel Recria-lo"
		Aviso("Atenção !!!" ,cLog,{"OK"})
	EndIf

Return 

/*
 	Gera Pedido de Venda no Porto  
*/
Static Function PedidoVendaPorto(cDocumento)
	Local aArea                 := {}  as array
	Local aCarrega              := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character
	aArea       	            := GetArea()
	
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := getQryPedidoVendaPorto(cDocumento)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				If ( AllTrim((cAlias)->PAY_DOC) $ AllTrim(cDocumento) )

					aAdd( aCarrega,{(cAlias)->PAY_FILIAL,;
									(cAlias)->PAY_DOC,;
									(cAlias)->PAY_ITEM,;
									(cAlias)->PAY_COD,;
									(cAlias)->PAY_DESC,;
									(cAlias)->PAY_TIPO,;
									(cAlias)->PAY_UM,;
									(cAlias)->PAY_TM,;
									(cAlias)->PAY_TES,;
									(cAlias)->PAY_TPMOV,;
									(cAlias)->PAY_FILMOV,;
									(cAlias)->PAY_LOCAL,;
									(cAlias)->PAY_QTD,;
									(cAlias)->PAY_COMP,;
									(cAlias)->PAY_DSCEMP,;
									(cAlias)->PAY_QTDEMP,;
									(cAlias)->PAX_DATA,;
									(cAlias)->PAX_HORA,;
									(cAlias)->PAX_USER,;
									(cAlias)->PAY_STATUS,;
									(cAlias)->PAY_OP,;
									(cAlias)->PAY_NUMPED,;
									(cAlias)->PAY_AVANCO})
				EndIf 

				(cAlias)->(dbSkip())
			EndDo
		EndIf 

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( Len(aCarrega) > 0 )

		ExecutaPedidoVendaPorto(aCarrega)
	Else 
		cLog += " - Filial: " + cFilAnt + " - Não Existe Dados"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return

/*
	Monta a Query para carregar dados - Busca na PAY
*/
Static Function getQryPedidoVendaPorto(cDocumento)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT " + CRLF
	cQuery += "		   PAY_FILIAL AS PAY_FILIAL, " + CRLF
	cQuery += "		   PAY_DOC    AS PAY_DOC,    " + CRLF
	cQuery += "		   PAY_ITEM   AS PAY_ITEM,   " + CRLF 
	cQuery += "		   PAY_COD    AS PAY_COD,    " + CRLF
	cQuery += "		   PAY_DESC   AS PAY_DESC,   " + CRLF
	cQuery += "		   PAY_TIPO   AS PAY_TIPO,   " + CRLF 
	cQuery += "		   PAY_UM     AS PAY_UM,     " + CRLF
	cQuery += "		   PAY_TM     AS PAY_TM,     " + CRLF
	cQuery += "		   PAY_TES    AS PAY_TES,    " + CRLF
	cQuery += "		   PAY_TPMOV  AS PAY_TPMOV,  " + CRLF
	cQuery += "		   PAY_FILMOV AS PAY_FILMOV, " + CRLF 
	cQuery += "		   PAY_LOCAL  AS PAY_LOCAL,  " + CRLF
	cQuery += "		   PAY_QTD    AS PAY_QTD,    " + CRLF
	cQuery += "		   PAY_COMP   AS PAY_COMP,   " + CRLF
	cQuery += "		   PAY_DSCEMP AS PAY_DSCEMP, " + CRLF
	cQuery += "		   PAY_QTDEMP AS PAY_QTDEMP, " + CRLF
	cQuery += "		   PAY_STATUS AS PAY_STATUS, " + CRLF
	cQuery += "		   PAY_AVANCO AS PAY_AVANCO, " + CRLF
	cQuery += "		   PAY_OP     AS PAY_OP,     " + CRLF
	cQuery += "		   PAY_NUMPED AS PAY_NUMPED, " + CRLF
	cQuery += "		   PAX_DATA   AS PAX_DATA,   " + CRLF
	cQuery += "		   PAX_HORA   AS PAX_HORA,   " + CRLF
	cQuery += "		   PAX_USER   AS PAX_USER,   " + CRLF 
	cQuery += "		   B2_QATU    AS B2_QATU     " + CRLF 
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("PAY") + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SB1") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND PAY_COD  = B1_COD    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SB1")   + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("PAX") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND PAY_FILIAL  = PAX_FILIAL " + CRLF
	cQuery += " 				  AND PAY_DOC     = PAX_DOC    " + CRLF
	cQuery += "     			  AND " + RetSqlDel("PAX") + CRLF
	cQuery += " 	   INNER JOIN " + CRLF
	cQuery += " 	              "+ RetSQLTab("SB2") +  CRLF
	cQuery += " 	              ON 1=1 " + CRLF
	cQuery += " 				  AND B2_FILIAL  = PAY_FILIAL " + CRLF
	cQuery += " 				  AND B2_COD     = PAY_COD    " + CRLF
	cQuery += " 				  AND B2_LOCAL   = PAY_LOCAL  " + CRLF
	cQuery += "     			  AND " + RetSqlDel("SB2") + CRLF
	cQuery += " WHERE  1 = 1 " + CRLF
	cQuery += "   	   AND PAY_DOC    = " + ValToSql(cDocumento) + "  " + CRLF
	cQuery += "   	   AND PAY_STATUS = " + ValToSql(AGUARDANDO) + "  " + CRLF
	cQuery += "   	   AND PAY_AVANCO = " + ValToSql(MOV_GERADO) + "  " + CRLF
	cQuery += "   	   AND PAY_TPMOV  = " + ValToSql(VENDA_CPV)  + "  " + CRLF
	cQuery += "   	   AND " + RetSqlDel("PAY") + CRLF
	cQuery += " ORDER BY PAY_ITEM " + CRLF

	u_ChangeQuery("\sql\GeraPedidoVendaPorto_getQryPedidoVendaPorto.sql", @cQuery)

Return cQuery

/*
	Executa abertura ordem produção via Execauto - Rotina MATA650
*/
Static Function ExecutaPedidoVendaPorto(aCarrega)
	Local aArea             := {}  as array
	Local aLogErro          := {}  as array
	Local aCabecalho        := {}  as array
	Local aItens            := {}  as array
	Local aItem    			:= {}  as array
	Local aLinha            := {}  as array
	Local aFinaliza         := {}  as array 
	Local nLinhaErro        := 0   as numeric
	Local nCarrega          := 0   as integer
	Local nOpcao            := 0   as integer
	Local nQuantidade       := 0   as integer
	Local nContador         := 0   as integer 
	Local nFinaliza         := 0   as integer 
	Local lGravaTabela      := .T. as logical
	Local lPassa            := .F. as logical
	Local cTextoErro        := ""  as character
	Local cLog              := ""  as character
	Local cAlias	        := ""  as character
	Local cEmpBkp 			:= ""  as character
	Local cFilBkp 			:= ""  as character
	Local cNumEmpBkp        := ""  as character
	Local cNumEmp			:= ""  as character
	Local cCodigoProduto    := ""  as character
	Local cDestinoLocal     := ""  as character
	Local cItemMovimento    := ""  as character
	Local cUnidadeMedida    := ""  as character
    Local cCodigoTes        := ""  as character	
	Local cNumeroPedido     := ""  as character	
	Local cDocMovimento     := ""  as character 
	Local cCodCliente       := ""  as character  
	Local cRetLog           := ""  as character 

	Private lAutoErrNoFile  := .T. as logical
	Private lMsErroAuto     := .F. as logical

	aArea       	        := GetArea()

	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	If ( Len(aCarrega) > 0 )
		
		For nCarrega:=1 To Len(aCarrega)

			If ( AllTrim(cFilAnt) $ AllTrim(cPermiteFilial) )
				cEmpBkp    := cEmpAnt
				cFilBkp    := cFilAnt
				cNumEmpBkp := cNumEmp
				cEmpAnt    := Alltrim(cLiberaEmpresa)
				cFilAnt    := Alltrim(aCarrega[nCarrega][11])
				cNumEmp    := cEmpAnt + cFilAnt
				OpenFile(cNumEmp)

				nOpcao              := OPCAO_INCLUI 
				lGravaTabela        := .F.
				aCabecalho          := {}
				aItem  			    := {}
				aItens              := {}
				aLinha              := {}
				aLogErro            := {}
				nQuantidade         := 0
				nContador++

				If ( AllTrim(Posicione("SB1",1,xFilial("SB1")+aCarrega[nCarrega][04],"B1_COD")) == AllTrim(aCarrega[nCarrega][04]) )
					lGravaTabela   := .T.
				Else
					lGravaTabela   := .F.
					cRetLog        := "Codigo de Produto Não Localizado " + Alltrim(aCarrega[nCarrega][04]) + CRLF
					dbSelectArea("PAX")
					PAX->(dbSetOrder(1)) 
					If ( PAX->(dbSeek(xFilial("PAX") + aCarrega[nCarrega][02] )))
						Begin Transaction
							PAX->(RecLock("PAX",.F.))
								PAX->PAX_RETLOG := cRetLog
							PAX->(MsUnlock())
						End Transaction
					EndIf
				EndIf

				If ( AllTrim(Posicione("SF4",1,xFilial("SF4")+aCarrega[nCarrega][09],"F4_CODIGO")) == AllTrim(aCarrega[nCarrega][09]) )
					If AllTrim(Posicione("SF4",1,xFilial("SF4")+aCarrega[nCarrega][09],"F4_TIPO"))    $ "S" .And. ;
					   AllTrim(Posicione("SF4",1,xFilial("SF4")+aCarrega[nCarrega][09],"F4_ESTOQUE")) $ "S" 	
						lGravaTabela   := .T.
					Else 
						cLog       := "Esta TES não é de Saida ou não movimenta Estoque, favor Verificar se esta correto o preenchimento no item da (GRID) !" + CRLF
						Aviso("Atenção - ExecAuto( MATA410 ) !!!" ,cLog,{"OK"})
						ShowLogInConsole(cLog)
						lGravaTabela := .F.
					EndIf 	
				Else
					lGravaTabela   := .F.
					cLog           := "TES Não Localizada"
					cRetLog        := "Codigo de TES Não Localizada!"
					dbSelectArea("PAX")
					PAX->(dbSetOrder(1)) 
					If ( PAX->(dbSeek(xFilial("PAX") + aCarrega[nCarrega][02] )))
						Begin Transaction
							PAX->(RecLock("PAX",.F.))
								PAX->PAX_RETLOG := cRetLog
							PAX->(MsUnlock())
						End Transaction
					EndIf
				EndIf

				If ( lGravaTabela )

					lMsErroAuto := .F.

					dbSelectArea("SB1")
					SB1->(dbSetOrder(1))
					If ( SB1->(dbSeek(xFilial("SB1") + aCarrega[nCarrega][04] )) )

						cCodCliente    := Alltrim(cClientePadrao)
						cLojaCliente   := Alltrim(cLojaCliente)
						cDocMovimento  := aCarrega[nCarrega][02] 
						cItemMovimento := aCarrega[nCarrega][03] 
						cCodigoProduto := aCarrega[nCarrega][04]
						cDestinoLocal  := aCarrega[nCarrega][12]
						cUnidadeMedida := aCarrega[nCarrega][07]
						cCodigoTes     := aCarrega[nCarrega][09]
						nQuantidade    := aCarrega[nCarrega][13]

						dbSelectArea("SB2")
						SB2->(dbSetOrder(1)) 
						If ( SB2->(dbSeek(xFilial("SB2") + cCodigoProduto + cDestinoLocal )))
							If ( SB2->B2_QATU >= nQuantidade )
								lGravaTabela := .T.
							EndIf
						Else 
							lGravaTabela := .F.
							cRetLog := "Não Existe Saldo suficiente para o Pedido de Vendas do Produto " + cCodigoProduto + CRLF
							cRetLog += "Será Necessario Verificar o Kardex e a Quantidade na Rotina de Manutenção Produção Automatica!!" + CRLF
							
							dbSelectArea("PAX")
							PAX->(dbSetOrder(1)) 
							If ( PAX->(dbSeek(xFilial("PAX") + cDocMovimento )))
								Begin Transaction
									PAX->(RecLock("PAX",.F.))
										PAX->PAX_RETLOG := cRetLog
									PAX->(MsUnlock())
								End Transaction
							EndIf
						EndIf

						dbSelectArea("SA1")
						SA1->(dbSetOrder(1)) 
						If ( SA1->(dbSeek(xFilial("SA1") + cCodCliente + cLojaCliente )))
							lGravaTabela := .T.
						Else
							cLog       := "Cliente Não Localizado, favor verificar os parametros (OZ_CLIENT e OZ_CLLOJA)!" + CRLF
							Aviso("Atenção - ExecAuto( MATA410 ) !!!" ,cLog,{"OK"})
							ShowLogInConsole(cLog)
							lGravaTabela := .F.
						EndIf

						dbSelectArea("SE4")
						SE4->(dbSetOrder(1)) 
						If ( SE4->(dbSeek(xFilial("SE4") + cCondPgto )))
							lGravaTabela := .T.
						Else
							cLog       := "Condição de pagamento Não Localizado, favor verificar o parametro (OZ_CONPGTO)!" + CRLF
							Aviso("Atenção - ExecAuto( MATA410 ) !!!" ,cLog,{"OK"})
							ShowLogInConsole(cLog)
							lGravaTabela := .F.
						EndIf

						dbSelectArea("NNR")
						NNR->(dbSetOrder(1)) 
						If ( NNR->(dbSeek(xFilial("NNR") + cDestinoLocal )))
							lGravaTabela := .T.
						Else
							cLog       := "Armazen Não Localizado, favor verificar o cadastro de Armazens!" + CRLF
							Aviso("Atenção - ExecAuto( MATA410 ) !!!" ,cLog,{"OK"})
							ShowLogInConsole(cLog)
							lGravaTabela := .F.
						EndIf

						If ( lGravaTabela )

							dbSelectArea("SC5")
							dbSelectArea("SC6")

							cNumeroPedido := RetNumeroPedidoVendas(cFilAnt)

							aadd(aCabecalho, {"C5_NUM",StrZero((Val(cNumeroPedido)+1),6) , Nil})
							aadd(aCabecalho, {"C5_TIPO",    TIPO_PEDIDO                  , Nil})
							aadd(aCabecalho, {"C5_CLIENTE", Alltrim(cClientePadrao)      , Nil})
							aadd(aCabecalho, {"C5_LOJACLI", Alltrim(cLojaCliente)        , Nil})
							aadd(aCabecalho, {"C5_LOJAENT", Alltrim(cLojaCliente)        , Nil})
							aadd(aCabecalho, {"C5_CONDPAG", Alltrim(cCondPgto)           , Nil})
							aadd(aCabecalho, {"C5_TIPOCLI", TIPOCLI				         , Nil})
							aadd(aCabecalho, {"C5_TRANSP",  cTransportadora	         	 , Nil})							
	
							aadd(aLinha,{"C6_ITEM",    StrZero(nContador,2)              , Nil})
							aadd(aLinha,{"C6_PRODUTO", cCodigoProduto                    , Nil})
							aadd(aLinha,{"C6_QTDVEN",  nQuantidade                       , Nil})
							aadd(aLinha,{"C6_QTDLIB",  nQuantidade                       , Nil})
							aadd(aLinha,{"C6_PRCVEN",  1                                 , Nil})
							aadd(aLinha,{"C6_PRUNIT",  1                                 , Nil})
							aadd(aLinha,{"C6_VALOR",   (1 * nQuantidade)                 , Nil})
							aadd(aLinha,{"C6_TES",     cCodigoTes                        , Nil})
							aadd(aLinha,{"C6_LOCAL",   cDestinoLocal                     , Nil})

							aadd(aItens, aLinha)

							ProcRegua(0)
							IncProc("Gerando Pedido de Venda do Produto ... " + Alltrim(cCodigoProduto) + "...")

							MSExecAuto({|a, b, c, d| MATA410(a, b, c, d)}, aCabecalho, aItens, nOpcao, .F.)

							If ( lMsErroAuto )

								cTextoErro := ""
								aLogErro   := GetAutoGRLog()

								For nLinhaErro := 1 To Len(aLogErro)
									cTextoErro += aLogErro[nLinhaErro] + CRLF
								Next nLinhaErro

								cLog       += cTextoErro + CRLF
								ShowLogInConsole(cLog)
								Aviso("Atenção - ExecAuto( MATA410 ) !!!" ,cLog,{"OK"})
							Else
								cLog       := "Pedido de Venda Executado com sucesso " + CRLF
								ShowLogInConsole(cLog)

								cRetLog := "Foi Gerado o Pedido de Vendas Numero " + Alltrim(cNumeroPedido) + CRLF
	
								dbSelectArea("PAX")
								PAX->(dbSetOrder(1)) 
								If ( PAX->(dbSeek(xFilial("PAX") + cDocMovimento )))
									Begin Transaction
										PAX->(RecLock("PAX",.F.))
											PAX->PAX_STATUS := PROCESSANDO
											PAX->PAX_PVENDA := GERADO_SUCESSO
											PAX->PAX_DATA   := dDataBase 
											PAX->PAX_RETLOG := cRetLog
										PAX->(MsUnlock())
									End Transaction
								EndIf

									aFinaliza := ValidaEncerramento(cDocMovimento,cFilAnt)  	

									If Len(aFinaliza) > 0
										For nFinaliza := 1 To Len(aFinaliza)
											
											lPassa := .F.
											
											If ( aFinaliza[nFinaliza][03] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL ))
												lPassa := .T.
											Else
												lPassa := .F.
												EXIT
											EndIf

											If ( aFinaliza[nFinaliza][04] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
												lPassa := .T.
											Else
												lPassa := .F.
												EXIT
											EndIf

											If ( aFinaliza[nFinaliza][05] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
												lPassa := .T.
											Else
												lPassa := .F.
												EXIT
											EndIf

											If (aFinaliza[nFinaliza][06] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
												lPassa := .T.
											Else
												lPassa := .F.
												EXIT
											EndIf

											If (aFinaliza[nFinaliza][07] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
												lPassa := .T.
											Else
												lPassa := .F.
												EXIT
											EndIf

											If (aFinaliza[nFinaliza][08] $ (GERADO_SUCESSO + "/" + NAO_APLICAVEL))
												lPassa := .T.
											Else
												lPassa := .F.
												EXIT
											EndIf

											IF ( lPassa )
												dbSelectArea("PAX")
												PAX->(dbSetOrder(1)) 
												If ( PAX->(dbSeek(xFilial("PAX") + aFinaliza[nFinaliza][02])))
													Begin Transaction
														PAX->(RecLock("PAX",.F.))
															PAX->PAX_STATUS := GERADO_SUCESSO
														PAX->(MsUnlock())
													End Transaction
												EndIf
											EndIf
										Next nFinaliza 
									EndIf 

								dbSelectArea("PAY")
								PAY->(dbSetOrder(2)) 
								If ( PAY->(dbSeek(xFilial("PAY") + cCodigoProduto + cDocMovimento + cItemMovimento )))
									Begin Transaction
										PAY->(RecLock("PAY",.F.))
											PAY->PAY_STATUS := GERADO_SUCESSO
											PAY->PAY_AVANCO := MOV_PEDVENDA
											PAY->PAY_DATA   := dDataBase 
											PAY->PAY_HORA   := Time()
											PAY->PAY_NUMPED := StrZero((Val(cNumeroPedido)+1),6)
										PAY->(MsUnlock())
									End Transaction
								EndIf
							EndIf
						EndIf 
					EndIf
				Else 
	
					ShowLogInConsole(cLog)
				EndIf
			EndIf 
		Next nCarrega

		If ( !Empty(cAlias) )
			dbSelectArea(cAlias)
			(cAlias)->(dbCloseArea())
		EndIf	

		If ( !Empty(AllTrim(cEmpBkp)))
			cEmpAnt := cEmpBkp
			cFilAnt := cFilBkp
			cNumEmp := cEmpAnt + cFilAnt
			OpenFile(cNumEmp)
		EndIf 

	EndIf

	RestArea( aArea )

Return

/*
 	Gera Ultimo numero dpo pedido de vendas
*/
Static Function RetNumeroPedidoVendas(cCodFilial)
	Local aArea                 := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character
	Local cNumPedVendas         := ""  as character

	aArea       	            := GetArea()
	
	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := NumeroPedidoVendas(cCodFilial)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				cNumPedVendas := (cAlias)->NUMERO 

				(cAlias)->(dbSkip())
			EndDo
		EndIf 

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return cNumPedVendas

/*
	Monta a Query para carregar mnumero maximo pedido de vendas
*/
Static Function NumeroPedidoVendas(cCodFilial)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT MAX(C5_NUM) AS NUMERO " + CRLF
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("SC5") + CRLF
	cQuery += " WHERE  1 = 1 " + CRLF
	cQuery += "   	   AND C5_FILIAL   = " + ValToSql(cCodFilial) + "  " + CRLF
	cQuery += "   	   AND " + RetSqlDel("SC5") + CRLF

	u_ChangeQuery("\sql\GeraPedidoVendaPorto_NumeroPedidoVendas.sql", @cQuery)

Return cQuery

/*
 	Gera Validação de Encerramento da movimentação  
*/
Static Function ValidaEncerramento(cDocMovimento,cCodFilial)
	Local aArea                 := {}  as array
	Local aCheckMovimento       := {}  as array
	Local cAlias	            := ""  as character
	Local cQuery	            := ""  as character
	Local cLog                  := ""  as character

	aArea       	            := GetArea()

	If ( !Empty(cAlias) )
		dbSelectArea(cAlias)
		(cAlias)->(dbCloseArea())
	EndIf

	cQuery               := QryCheckValidacao(cDocMovimento,cCodFilial)
	cAlias               := MpSysOpenQuery(cQuery)

	If ( !Empty(cAlias) )

		dbSelectArea(cAlias)

		If ( (cAlias)->(!EOF()) )

			While ((cAlias)->(!EOF()))

				aAdd(aCheckMovimento,{(cAlias)->PAX_FILIAL,;
									  (cAlias)->PAX_DOC,;
									  (cAlias)->PAX_CRIAOP,;
									  (cAlias)->PAX_APTOOP,;
									  (cAlias)->PAX_TRANSF,;
									  (cAlias)->PAX_REQUIS,;
									  (cAlias)->PAX_PVENDA,;
									  (cAlias)->PAX_GERNF})

				(cAlias)->(dbSkip())
			EndDo
		EndIf

		(cAlias)->(dbCloseArea())
	Else

		cLog += " - Filial: " + cFilAnt + " - Não Localizada"
	EndIf

	If ( !Empty(cLog) )
		showLogInConsole(StrTran(cLog,CRLF,", ") )
	Endif

	RestArea( aArea )

Return aCheckMovimento

/*
	Monta a Query para Checar os status da PAX
*/
Static Function QryCheckValidacao(cDocMovimento,cCodFilial)
	Local cQuery 	    := ""  as character

	cQuery := " SELECT  " + CRLF
	cQuery += "		   PAX_FILIAL AS PAX_FILIAL, " + CRLF
	cQuery += "		   PAX_DOC    AS PAX_DOC,    " + CRLF
	cQuery += "		   PAX_CRIAOP AS PAX_CRIAOP, " + CRLF
	cQuery += "		   PAX_APTOOP AS PAX_APTOOP, " + CRLF
	cQuery += "		   PAX_TRANSF AS PAX_TRANSF, " + CRLF
	cQuery += "		   PAX_REQUIS AS PAX_REQUIS, " + CRLF
	cQuery += "		   PAX_PVENDA AS PAX_PVENDA, " + CRLF
	cQuery += "		   PAX_GERNF  AS PAX_GERNF   " + CRLF
	cQuery += " FROM   " + CRLF
	cQuery += " 	   " + RetSQLTab("PAX") + CRLF
	cQuery += " WHERE  1 = 1 " + CRLF
	cQuery += "   	   AND PAX_FILIAL = " + ValToSql(cCodFilial) + "  " + CRLF
	cQuery += "   	   AND PAX_DOC    = " + ValToSql(cDocMovimento) + "  " + CRLF
	cQuery += "   	   AND " + RetSqlDel("PAX") + CRLF

	u_ChangeQuery("\sql\GeraPedidoVendaPorto_QryCheckValidacao.sql", @cQuery)

Return cQuery


/*
	Apresenta a Mensagem no Console do Protheus
*/
Static Function showLogInConsole(cMsg)

	libOzminerals.u_showLogInConsole(cMsg,cSintaxeRotina)

Return

